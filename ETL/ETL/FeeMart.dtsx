<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="5/30/2021 7:07:34 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="DESKTOP-6OSGPE0"
  DTS:CreatorName="DESKTOP-6OSGPE0\Scytlee"
  DTS:DTSID="{02777A17-E13B-40BF-B231-D786AC92A651}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.2000.152"
  DTS:LocaleID="2057"
  DTS:ObjectName="Package1"
  DTS:PackageType="5"
  DTS:VersionBuild="30"
  DTS:VersionGUID="{3429BF8D-8795-4800-BE50-2CE7B3769E1D}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[Fees]"
      DTS:CreationName="FLATFILE"
      DTS:DTSID="{69311B76-C2FA-4978-A060-F45869002636}"
      DTS:ObjectName="Fees">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:Format="Delimited"
          DTS:LocaleID="2057"
          DTS:HeaderRowDelimiter="_x000D__x000A_"
          DTS:ColumnNamesInFirstDataRow="True"
          DTS:RowDelimiter=""
          DTS:TextQualifier="_x0022_"
          DTS:CodePage="65001"
          DTS:ConnectionString="C:\Repos\datawarehouses\datasets\DCA_Fines_and_Fees.csv">
          <DTS:FlatFileColumns>
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="130"
              DTS:TextQualified="True"
              DTS:ObjectName="RECORD ID"
              DTS:DTSID="{D441DAC6-62CA-49D7-86E8-722AF5C724E2}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="130"
              DTS:TextQualified="True"
              DTS:ObjectName="RECORD TYPE"
              DTS:DTSID="{6BA9A703-47F1-4AAC-803A-7FB69611731E}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="300"
              DTS:DataType="130"
              DTS:TextQualified="True"
              DTS:ObjectName="BUSINESS NAME"
              DTS:DTSID="{FDFCAC3B-CB6D-4198-9707-FD5195BDB99B}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="100"
              DTS:DataType="130"
              DTS:TextQualified="True"
              DTS:ObjectName="BUSINESS NAME2"
              DTS:DTSID="{576D6953-CF1A-4337-98E8-126A9797E390}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="130"
              DTS:TextQualified="True"
              DTS:ObjectName="INDUSTRY"
              DTS:DTSID="{46AD3E85-CE7F-487D-BF82-9EB11D087A6F}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="130"
              DTS:TextQualified="True"
              DTS:ObjectName="FEE SEQUENCE ID"
              DTS:DTSID="{EC3BFB70-F972-4CFE-8756-93DFB9EC0AF8}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="130"
              DTS:TextQualified="True"
              DTS:ObjectName="FEE TYPE"
              DTS:DTSID="{2AB46ACF-AB7B-48D2-B26A-C705A91F6AE3}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="100"
              DTS:DataType="130"
              DTS:TextQualified="True"
              DTS:ObjectName="FEE DESCRIPTION"
              DTS:DTSID="{2C88F499-EAE9-4B42-B8D9-50046F1E3F51}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="130"
              DTS:TextQualified="True"
              DTS:ObjectName="FEE AMOUNT"
              DTS:DTSID="{44448B64-7191-4EE0-B42E-D0B6D970CCA6}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="130"
              DTS:TextQualified="True"
              DTS:ObjectName="FEE DATE"
              DTS:DTSID="{9D80ACE8-66F7-4512-B59D-010FEAD813B1}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x000A_"
              DTS:MaximumWidth="50"
              DTS:DataType="130"
              DTS:TextQualified="True"
              DTS:ObjectName="FEE STATUS"
              DTS:DTSID="{0F611303-ED53-47F9-A6BE-29A611ADD609}"
              DTS:CreationName="" />
          </DTS:FlatFileColumns>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[Fees - errors]"
      DTS:CreationName="FLATFILE"
      DTS:DTSID="{A725B883-D666-44FF-AE80-419082DED2BD}"
      DTS:ObjectName="Fees - errors">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:Format="Delimited"
          DTS:LocaleID="2057"
          DTS:HeaderRowDelimiter="_x000D__x000A_"
          DTS:RowDelimiter=""
          DTS:TextQualifier="_x0022_"
          DTS:CodePage="65001"
          DTS:ConnectionString="C:\Repos\datawarehouses\datasets\errors\Fees - errors.csv">
          <DTS:FlatFileColumns>
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:DataType="302"
              DTS:TextQualified="True"
              DTS:ObjectName="Flat File Source Error Output Column"
              DTS:DTSID="{89F32155-2D83-4C29-8883-4974D4B8FB05}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:DataType="3"
              DTS:TextQualified="True"
              DTS:ObjectName="ErrorCode"
              DTS:DTSID="{E6065E22-F120-49BF-9776-074509FC0719}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x000D__x000A_"
              DTS:DataType="3"
              DTS:TextQualified="True"
              DTS:ObjectName="ErrorColumn"
              DTS:DTSID="{D8DF2257-1D84-4740-83F1-CBE11B11CB60}"
              DTS:CreationName="" />
          </DTS:FlatFileColumns>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[Licenses]"
      DTS:CreationName="FLATFILE"
      DTS:DTSID="{EF9162DA-BED7-4C94-9A7C-1293CD2DEADB}"
      DTS:ObjectName="Licenses">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:Format="Delimited"
          DTS:LocaleID="2057"
          DTS:HeaderRowDelimiter="_x000D__x000A_"
          DTS:ColumnNamesInFirstDataRow="True"
          DTS:RowDelimiter=""
          DTS:TextQualifier="_x0022_"
          DTS:CodePage="65001"
          DTS:ConnectionString="C:\Repos\datawarehouses\datasets\Legally_Operating_Businesses.csv">
          <DTS:FlatFileColumns>
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="130"
              DTS:TextQualified="True"
              DTS:ObjectName="DCA License Number"
              DTS:DTSID="{EAF672A0-C7D0-493B-89C2-145E56F87076}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="130"
              DTS:TextQualified="True"
              DTS:ObjectName="License Type"
              DTS:DTSID="{21A9F0E0-2814-4459-994D-D076B3258180}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="130"
              DTS:TextQualified="True"
              DTS:ObjectName="License Expiration Date"
              DTS:DTSID="{3A835EE4-F1DB-440B-B6CD-A5FACD200D31}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="130"
              DTS:TextQualified="True"
              DTS:ObjectName="License Status"
              DTS:DTSID="{774DF28C-E9B7-432A-B751-31D1F860938F}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="130"
              DTS:TextQualified="True"
              DTS:ObjectName="License Creation Date"
              DTS:DTSID="{93D65231-44DC-468D-B2EC-D2536752525D}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="130"
              DTS:TextQualified="True"
              DTS:ObjectName="Industry"
              DTS:DTSID="{EB662551-4A0B-427C-BABF-D78B35F0C4A7}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="300"
              DTS:DataType="130"
              DTS:TextQualified="True"
              DTS:ObjectName="Business Name"
              DTS:DTSID="{DD9DB49D-876A-4835-9BCC-8B3D09784D04}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="100"
              DTS:DataType="130"
              DTS:TextQualified="True"
              DTS:ObjectName="Business Name 2"
              DTS:DTSID="{36C89F56-FA86-40DF-AA63-53B1F18AD9D2}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="130"
              DTS:TextQualified="True"
              DTS:ObjectName="Address Building"
              DTS:DTSID="{229C384E-7267-4799-829D-346112844260}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="75"
              DTS:DataType="130"
              DTS:TextQualified="True"
              DTS:ObjectName="Address Street Name"
              DTS:DTSID="{C7F2FBBD-8E65-423C-874B-8AF81DD494F3}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="75"
              DTS:DataType="130"
              DTS:TextQualified="True"
              DTS:ObjectName="Secondary Address Street Name"
              DTS:DTSID="{3B20ACE0-F247-4CD5-9370-77ADB2DB0190}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="130"
              DTS:TextQualified="True"
              DTS:ObjectName="Address City"
              DTS:DTSID="{368853EF-E440-4B03-B3E8-7E33C9C46EA7}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="130"
              DTS:TextQualified="True"
              DTS:ObjectName="Address State"
              DTS:DTSID="{C1506450-74FE-4C82-8DD8-AE5B3CB4EA73}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="130"
              DTS:TextQualified="True"
              DTS:ObjectName="Address ZIP"
              DTS:DTSID="{0710565C-BA04-40EB-B102-DEFE7105A86C}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="130"
              DTS:TextQualified="True"
              DTS:ObjectName="Contact Phone Number"
              DTS:DTSID="{CE1E1190-E50E-4CAF-8972-91F978D9528D}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="130"
              DTS:TextQualified="True"
              DTS:ObjectName="Address Borough"
              DTS:DTSID="{765FB217-763C-4D7C-8F58-D2C8B90EB2AE}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="130"
              DTS:TextQualified="True"
              DTS:ObjectName="Borough Code"
              DTS:DTSID="{19BE77C7-7AC3-44AE-BB22-6FC31465DE48}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="130"
              DTS:TextQualified="True"
              DTS:ObjectName="Community Board"
              DTS:DTSID="{3027E0A2-38FE-4A19-B75D-2F30FE21E51F}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="130"
              DTS:TextQualified="True"
              DTS:ObjectName="Council District"
              DTS:DTSID="{379F2828-8D39-43E7-B323-A5F385760D59}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="130"
              DTS:TextQualified="True"
              DTS:ObjectName="BIN"
              DTS:DTSID="{DF9C5EE5-9429-46C8-B11F-B8C9EFB74881}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="130"
              DTS:TextQualified="True"
              DTS:ObjectName="BBL"
              DTS:DTSID="{68001E57-36C8-4C02-84F9-17BC1D330947}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="130"
              DTS:TextQualified="True"
              DTS:ObjectName="NTA"
              DTS:DTSID="{5EF1402A-6181-452B-8398-EE350504ECF0}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="130"
              DTS:TextQualified="True"
              DTS:ObjectName="Census Tract"
              DTS:DTSID="{49CBBF29-6739-4CF4-B344-58FAD43B4657}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="300"
              DTS:DataType="130"
              DTS:TextQualified="True"
              DTS:ObjectName="Detail"
              DTS:DTSID="{F66F4CFC-A11C-49E2-AF1F-0314C3682796}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="130"
              DTS:TextQualified="True"
              DTS:ObjectName="Longitude"
              DTS:DTSID="{F065D38B-9FC1-4855-87B4-DB6BE5D2EDD5}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="130"
              DTS:TextQualified="True"
              DTS:ObjectName="Latitude"
              DTS:DTSID="{E08E30B3-43CA-4C0D-9F7A-6441DB7FC7B5}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x000A_"
              DTS:MaximumWidth="50"
              DTS:DataType="130"
              DTS:TextQualified="True"
              DTS:ObjectName="Location"
              DTS:DTSID="{5B8CEBB7-4AA1-4904-B76C-4C47770C2272}"
              DTS:CreationName="" />
          </DTS:FlatFileColumns>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[Licenses - errors]"
      DTS:CreationName="FLATFILE"
      DTS:DTSID="{7969E795-3F83-41DB-816D-30A4CCE6F464}"
      DTS:ObjectName="Licenses - errors">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:Format="Delimited"
          DTS:LocaleID="2057"
          DTS:HeaderRowDelimiter="_x000D__x000A_"
          DTS:RowDelimiter=""
          DTS:TextQualifier="_x0022_"
          DTS:CodePage="65001"
          DTS:ConnectionString="C:\Repos\datawarehouses\datasets\errors\Licenses - errors.csv">
          <DTS:FlatFileColumns>
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:DataType="302"
              DTS:TextQualified="True"
              DTS:ObjectName="Flat File Source Error Output Column"
              DTS:DTSID="{25E31138-F193-45B9-838B-9829177EF5EF}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:DataType="3"
              DTS:TextQualified="True"
              DTS:ObjectName="ErrorCode"
              DTS:DTSID="{4488224D-D059-46BA-ABF1-9DBABE0E2FD5}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x000D__x000A_"
              DTS:DataType="3"
              DTS:TextQualified="True"
              DTS:ObjectName="ErrorColumn"
              DTS:DTSID="{391E9114-3653-4BED-874A-42EAAE6BFD29}"
              DTS:CreationName="" />
          </DTS:FlatFileColumns>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[LocalHost.Miniproject]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{2AE594AF-1E0E-4046-88A5-B26D8D809332}"
      DTS:ObjectName="LocalHost.Miniproject">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=.;Initial Catalog=Miniproject;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[LocalHost.Miniproject 1]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{91F8B0E2-5835-4CC5-93FF-AFBE6A98F706}"
      DTS:ObjectName="LocalHost.Miniproject 1">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=.;Initial Catalog=Miniproject;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[Payments]"
      DTS:CreationName="FLATFILE"
      DTS:DTSID="{0760D50B-BAB1-4D0E-8062-50A85CD0002F}"
      DTS:ObjectName="Payments">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:Format="Delimited"
          DTS:LocaleID="2057"
          DTS:HeaderRowDelimiter="_x000D__x000A_"
          DTS:ColumnNamesInFirstDataRow="True"
          DTS:RowDelimiter=""
          DTS:TextQualifier="_x0022_"
          DTS:CodePage="65001"
          DTS:ConnectionString="C:\Repos\datawarehouses\datasets\Payments_Received_for_DCA_Fines_and_Fees.csv">
          <DTS:FlatFileColumns>
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="130"
              DTS:TextQualified="True"
              DTS:ObjectName="RECORD ID"
              DTS:DTSID="{0A5E9640-778C-4784-9E74-5DC69F50E66B}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="130"
              DTS:TextQualified="True"
              DTS:ObjectName="RECORD DYPE"
              DTS:DTSID="{23CC5A1C-57A0-47AF-8562-42AFAA56575C}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="300"
              DTS:DataType="130"
              DTS:TextQualified="True"
              DTS:ObjectName="BUSINESS NAME"
              DTS:DTSID="{4D6D6599-2393-46D2-918A-B90B564BBC53}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="100"
              DTS:DataType="130"
              DTS:TextQualified="True"
              DTS:ObjectName="BUSINESS NAME2"
              DTS:DTSID="{4098F8B9-781F-4171-8630-A7AF2837C2F6}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="130"
              DTS:TextQualified="True"
              DTS:ObjectName="INDUSTRY"
              DTS:DTSID="{321ED934-3D3B-41E0-8B7E-E101AA521BE5}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="130"
              DTS:TextQualified="True"
              DTS:ObjectName="FEE SEQUENCE ID"
              DTS:DTSID="{D8D87846-648E-479A-8848-1B0D194F1578}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="130"
              DTS:TextQualified="True"
              DTS:ObjectName="FEE TYPE"
              DTS:DTSID="{02E8FA5F-7F60-4B9A-A9EF-0F57367C81C1}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="100"
              DTS:DataType="130"
              DTS:TextQualified="True"
              DTS:ObjectName="FEE DESCRIPTION"
              DTS:DTSID="{02BFF508-2A42-4818-97E6-B4DD2D752FAA}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="130"
              DTS:TextQualified="True"
              DTS:ObjectName="PAYMENT AMOUNT"
              DTS:DTSID="{332BF663-DC7D-4091-BC11-53AB4AE86CC6}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="130"
              DTS:TextQualified="True"
              DTS:ObjectName="PAYMENT DATE"
              DTS:DTSID="{1D66E3BE-72A3-413B-9606-3F98CCFC4B56}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x000A_"
              DTS:MaximumWidth="50"
              DTS:DataType="130"
              DTS:TextQualified="True"
              DTS:ObjectName="TRANSACTION TYPE"
              DTS:DTSID="{4531B596-6358-447F-A777-D29E97F0A701}"
              DTS:CreationName="" />
          </DTS:FlatFileColumns>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[Payments - errors]"
      DTS:CreationName="FLATFILE"
      DTS:DTSID="{61039487-E337-4254-A4B3-BD93E355190A}"
      DTS:ObjectName="Payments - errors">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:Format="Delimited"
          DTS:LocaleID="2057"
          DTS:HeaderRowDelimiter="_x000D__x000A_"
          DTS:RowDelimiter=""
          DTS:TextQualifier="_x0022_"
          DTS:CodePage="65001"
          DTS:ConnectionString="C:\Repos\datawarehouses\datasets\errors\New Text Document.txt">
          <DTS:FlatFileColumns>
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:DataType="302"
              DTS:TextQualified="True"
              DTS:ObjectName="Flat File Source Error Output Column"
              DTS:DTSID="{72391954-DBD2-439F-AC06-C2852D364B6C}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:DataType="3"
              DTS:TextQualified="True"
              DTS:ObjectName="ErrorCode"
              DTS:DTSID="{9535923C-5918-4B57-B51C-69E2C35888A8}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x000D__x000A_"
              DTS:DataType="3"
              DTS:TextQualified="True"
              DTS:ObjectName="ErrorColumn"
              DTS:DTSID="{637EE302-37ED-43C5-9BA0-11764BC6F03F}"
              DTS:CreationName="" />
          </DTS:FlatFileColumns>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Ensure correctness of license data"
      DTS:CreationName="Microsoft.Pipeline"
      DTS:Description="Data Flow Task"
      DTS:Disabled="True"
      DTS:DTSID="{0D5E95B3-7CD7-418C-B0D3-97F380B06F6C}"
      DTS:ExecutableType="Microsoft.Pipeline"
      DTS:LocaleID="-1"
      DTS:ObjectName="Ensure correctness of license data"
      DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
      <DTS:Variables />
      <DTS:ObjectData>
        <pipeline
          version="1">
          <components>
            <component
              refId="Package\Ensure correctness of license data\Data Conversion"
              componentClassID="Microsoft.DataConvert"
              contactInfo="Data Conversion;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
              description="Data Conversion"
              name="Data Conversion"
              usesDispositions="true">
              <inputs>
                <input
                  refId="Package\Ensure correctness of license data\Data Conversion.Inputs[Data Conversion Input]"
                  name="Data Conversion Input">
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Ensure correctness of license data\Data Conversion.Outputs[Data Conversion Output]"
                  exclusionGroup="1"
                  name="Data Conversion Output"
                  synchronousInputId="Package\Ensure correctness of license data\Data Conversion.Inputs[Data Conversion Input]">
                  <externalMetadataColumns />
                </output>
                <output
                  refId="Package\Ensure correctness of license data\Data Conversion.Outputs[Data Conversion Error Output]"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="Data Conversion Error Output"
                  synchronousInputId="Package\Ensure correctness of license data\Data Conversion.Inputs[Data Conversion Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Ensure correctness of license data\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Ensure correctness of license data\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Ensure correctness of license data\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Ensure correctness of license data\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Ensure correctness of license data\Do something 1"
              componentClassID="Microsoft.DerivedColumn"
              contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
              description="Creates new column values by applying expressions to transformation input columns. Create new columns or overwrite existing ones. For example, concatenate the values from the 'first name' and 'last name' column to make a 'full name' column."
              name="Do something 1"
              usesDispositions="true">
              <inputs>
                <input
                  refId="Package\Ensure correctness of license data\Do something 1.Inputs[Derived Column Input]"
                  description="Input to the Derived Column Transformation"
                  name="Derived Column Input">
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Ensure correctness of license data\Do something 1.Outputs[Derived Column Output]"
                  description="Default Output of the Derived Column Transformation"
                  exclusionGroup="1"
                  name="Derived Column Output"
                  synchronousInputId="Package\Ensure correctness of license data\Do something 1.Inputs[Derived Column Input]">
                  <externalMetadataColumns />
                </output>
                <output
                  refId="Package\Ensure correctness of license data\Do something 1.Outputs[Derived Column Error Output]"
                  description="Error Output of the Derived Column Transformation"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="Derived Column Error Output"
                  synchronousInputId="Package\Ensure correctness of license data\Do something 1.Inputs[Derived Column Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Ensure correctness of license data\Do something 1.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Ensure correctness of license data\Do something 1.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Ensure correctness of license data\Do something 1.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Ensure correctness of license data\Do something 1.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Ensure correctness of license data\Do something 2"
              componentClassID="Microsoft.DerivedColumn"
              contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
              description="Creates new column values by applying expressions to transformation input columns. Create new columns or overwrite existing ones. For example, concatenate the values from the 'first name' and 'last name' column to make a 'full name' column."
              name="Do something 2"
              usesDispositions="true">
              <inputs>
                <input
                  refId="Package\Ensure correctness of license data\Do something 2.Inputs[Derived Column Input]"
                  description="Input to the Derived Column Transformation"
                  name="Derived Column Input">
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Ensure correctness of license data\Do something 2.Outputs[Derived Column Output]"
                  description="Default Output of the Derived Column Transformation"
                  exclusionGroup="1"
                  name="Derived Column Output"
                  synchronousInputId="Package\Ensure correctness of license data\Do something 2.Inputs[Derived Column Input]">
                  <externalMetadataColumns />
                </output>
                <output
                  refId="Package\Ensure correctness of license data\Do something 2.Outputs[Derived Column Error Output]"
                  description="Error Output of the Derived Column Transformation"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="Derived Column Error Output"
                  synchronousInputId="Package\Ensure correctness of license data\Do something 2.Inputs[Derived Column Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Ensure correctness of license data\Do something 2.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Ensure correctness of license data\Do something 2.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Ensure correctness of license data\Do something 2.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Ensure correctness of license data\Do something 2.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Ensure correctness of license data\Filter out rows with empty BusinessName"
              componentClassID="Microsoft.ConditionalSplit"
              contactInfo="Conditional Split;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
              description="Routes data rows to different outputs depending on the content of the data. Use conditions (SSIS expressions) to specify which rows are routed. For example, separate records that need to be cleaned from those that are ready to be loaded or route only a subset of records."
              name="Filter out rows with empty BusinessName"
              usesDispositions="true">
              <inputs>
                <input
                  refId="Package\Ensure correctness of license data\Filter out rows with empty BusinessName.Inputs[Conditional Split Input]"
                  description="Input to the Conditional Split Transformation"
                  name="Conditional Split Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Ensure correctness of license data\Filter out rows with empty BusinessName.Inputs[Conditional Split Input].Columns[BusinessName]"
                      cachedDataType="wstr"
                      cachedLength="300"
                      cachedName="BusinessName"
                      lineageId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].Columns[BusinessName]" />
                  </inputColumns>
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Ensure correctness of license data\Filter out rows with empty BusinessName.Outputs[BusinessName exists]"
                  description="Output 1 of the Conditional Split Transformation"
                  errorOrTruncationOperation="Computation"
                  errorRowDisposition="RedirectRow"
                  exclusionGroup="1"
                  name="BusinessName exists"
                  synchronousInputId="Package\Ensure correctness of license data\Filter out rows with empty BusinessName.Inputs[Conditional Split Input]"
                  truncationRowDisposition="RedirectRow">
                  <properties>
                    <property
                      containsID="true"
                      dataType="System.String"
                      description="Specifies the expression. This expression version uses lineage identifiers instead of column names."
                      name="Expression">#{Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].Columns[BusinessName]} != ""</property>
                    <property
                      containsID="true"
                      dataType="System.String"
                      description="Specifies the friendly version of the expression. This expression version uses column names."
                      expressionType="Notify"
                      name="FriendlyExpression">BusinessName != ""</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the position of the condition in the list of conditions that the transformation evaluates. The evaluation order is from the lowest to the highest value."
                      name="EvaluationOrder">0</property>
                  </properties>
                  <externalMetadataColumns />
                </output>
                <output
                  refId="Package\Ensure correctness of license data\Filter out rows with empty BusinessName.Outputs[Conditional Split Default Output]"
                  description="Default Output of the Conditional Split Transformation"
                  exclusionGroup="1"
                  name="Conditional Split Default Output"
                  synchronousInputId="Package\Ensure correctness of license data\Filter out rows with empty BusinessName.Inputs[Conditional Split Input]">
                  <properties>
                    <property
                      dataType="System.Boolean"
                      name="IsDefaultOut">true</property>
                  </properties>
                  <externalMetadataColumns />
                </output>
                <output
                  refId="Package\Ensure correctness of license data\Filter out rows with empty BusinessName.Outputs[Conditional Split Error Output]"
                  description="Error Output of the Conditional Split Transformation"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="Conditional Split Error Output"
                  synchronousInputId="Package\Ensure correctness of license data\Filter out rows with empty BusinessName.Inputs[Conditional Split Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Ensure correctness of license data\Filter out rows with empty BusinessName.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Ensure correctness of license data\Filter out rows with empty BusinessName.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Ensure correctness of license data\Filter out rows with empty BusinessName.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Ensure correctness of license data\Filter out rows with empty BusinessName.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Ensure correctness of license data\Filter out rows with empty LicenseCreationDate"
              componentClassID="Microsoft.ConditionalSplit"
              contactInfo="Conditional Split;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
              description="Routes data rows to different outputs depending on the content of the data. Use conditions (SSIS expressions) to specify which rows are routed. For example, separate records that need to be cleaned from those that are ready to be loaded or route only a subset of records."
              name="Filter out rows with empty LicenseCreationDate"
              usesDispositions="true">
              <inputs>
                <input
                  refId="Package\Ensure correctness of license data\Filter out rows with empty LicenseCreationDate.Inputs[Conditional Split Input]"
                  description="Input to the Conditional Split Transformation"
                  name="Conditional Split Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Ensure correctness of license data\Filter out rows with empty LicenseCreationDate.Inputs[Conditional Split Input].Columns[LicenseCreationDate]"
                      cachedDataType="wstr"
                      cachedLength="10"
                      cachedName="LicenseCreationDate"
                      lineageId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].Columns[LicenseCreationDate]" />
                  </inputColumns>
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Ensure correctness of license data\Filter out rows with empty LicenseCreationDate.Outputs[LicenseCreationDate exists]"
                  description="Output 1 of the Conditional Split Transformation"
                  errorOrTruncationOperation="Computation"
                  errorRowDisposition="FailComponent"
                  exclusionGroup="1"
                  name="LicenseCreationDate exists"
                  synchronousInputId="Package\Ensure correctness of license data\Filter out rows with empty LicenseCreationDate.Inputs[Conditional Split Input]"
                  truncationRowDisposition="RedirectRow">
                  <properties>
                    <property
                      containsID="true"
                      dataType="System.String"
                      description="Specifies the expression. This expression version uses lineage identifiers instead of column names."
                      name="Expression">#{Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].Columns[LicenseCreationDate]} != ""</property>
                    <property
                      containsID="true"
                      dataType="System.String"
                      description="Specifies the friendly version of the expression. This expression version uses column names."
                      expressionType="Notify"
                      name="FriendlyExpression">LicenseCreationDate != ""</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the position of the condition in the list of conditions that the transformation evaluates. The evaluation order is from the lowest to the highest value."
                      name="EvaluationOrder">0</property>
                  </properties>
                  <externalMetadataColumns />
                </output>
                <output
                  refId="Package\Ensure correctness of license data\Filter out rows with empty LicenseCreationDate.Outputs[Conditional Split Default Output]"
                  description="Default Output of the Conditional Split Transformation"
                  exclusionGroup="1"
                  name="Conditional Split Default Output"
                  synchronousInputId="Package\Ensure correctness of license data\Filter out rows with empty LicenseCreationDate.Inputs[Conditional Split Input]">
                  <properties>
                    <property
                      dataType="System.Boolean"
                      name="IsDefaultOut">true</property>
                  </properties>
                  <externalMetadataColumns />
                </output>
                <output
                  refId="Package\Ensure correctness of license data\Filter out rows with empty LicenseCreationDate.Outputs[Conditional Split Error Output]"
                  description="Error Output of the Conditional Split Transformation"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="Conditional Split Error Output"
                  synchronousInputId="Package\Ensure correctness of license data\Filter out rows with empty LicenseCreationDate.Inputs[Conditional Split Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Ensure correctness of license data\Filter out rows with empty LicenseCreationDate.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Ensure correctness of license data\Filter out rows with empty LicenseCreationDate.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Ensure correctness of license data\Filter out rows with empty LicenseCreationDate.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Ensure correctness of license data\Filter out rows with empty LicenseCreationDate.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Ensure correctness of license data\Get selected columns from extracted license data"
              componentClassID="Microsoft.OLEDBSource"
              contactInfo="OLE DB Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;7"
              description="OLE DB Source"
              name="Get selected columns from extracted license data"
              usesDispositions="true"
              version="7">
              <properties>
                <property
                  dataType="System.Int32"
                  description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                  name="CommandTimeout">0</property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the database object used to open a rowset."
                  name="OpenRowset">[DWSTAGE].[LicenseExtract]</property>
                <property
                  dataType="System.String"
                  description="Specifies the variable that contains the name of the database object used to open a rowset."
                  name="OpenRowsetVariable"></property>
                <property
                  dataType="System.String"
                  description="The SQL command to be executed."
                  name="SqlCommand"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                <property
                  dataType="System.String"
                  description="The variable that contains the SQL command to be executed."
                  name="SqlCommandVariable"></property>
                <property
                  dataType="System.Int32"
                  description="Specifies the column code page to use when code page information is unavailable from the data source."
                  name="DefaultCodePage">1252</property>
                <property
                  dataType="System.Boolean"
                  description="Forces the use of the DefaultCodePage property value when describing character data."
                  name="AlwaysUseDefaultCodePage">false</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the mode used to access the database."
                  name="AccessMode"
                  typeConverter="AccessMode">0</property>
                <property
                  dataType="System.String"
                  description="The mappings between the parameters in the SQL command and variables."
                  name="ParameterMapping"></property>
              </properties>
              <connections>
                <connection
                  refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Connections[OleDbConnection]"
                  connectionManagerID="Package.ConnectionManagers[LocalHost.Miniproject]"
                  connectionManagerRefId="Package.ConnectionManagers[LocalHost.Miniproject]"
                  description="The OLE DB runtime connection used to access the database."
                  name="OleDbConnection" />
              </connections>
              <outputs>
                <output
                  refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output]"
                  name="OLE DB Source Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].Columns[LicenseNumber]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].ExternalColumns[DCALicenseNumber]"
                      length="50"
                      lineageId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].Columns[LicenseNumber]"
                      name="LicenseNumber"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].Columns[BusinessType]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].ExternalColumns[LicenseType]"
                      length="50"
                      lineageId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].Columns[BusinessType]"
                      name="BusinessType"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].Columns[LicenseExpirationDate]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].ExternalColumns[LicenseExpirationDate]"
                      length="10"
                      lineageId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].Columns[LicenseExpirationDate]"
                      name="LicenseExpirationDate"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].Columns[LicenseCreationDate]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].ExternalColumns[LicenseCreationDate]"
                      length="10"
                      lineageId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].Columns[LicenseCreationDate]"
                      name="LicenseCreationDate"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].Columns[Industry]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].ExternalColumns[Industry]"
                      length="50"
                      lineageId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].Columns[Industry]"
                      name="Industry"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].Columns[BusinessName]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].ExternalColumns[BusinessName]"
                      length="300"
                      lineageId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].Columns[BusinessName]"
                      name="BusinessName"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].Columns[BusinessName2]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].ExternalColumns[BusinessName2]"
                      length="100"
                      lineageId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].Columns[BusinessName2]"
                      name="BusinessName2"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].Columns[AddressBuilding]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].ExternalColumns[AddressBuilding]"
                      length="50"
                      lineageId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].Columns[AddressBuilding]"
                      name="AddressBuilding"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].Columns[AddressStreetName]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].ExternalColumns[AddressStreetName]"
                      length="75"
                      lineageId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].Columns[AddressStreetName]"
                      name="AddressStreetName"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].Columns[SecondaryAddressStreetName]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].ExternalColumns[SecondaryAddressStreetName]"
                      length="75"
                      lineageId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].Columns[SecondaryAddressStreetName]"
                      name="SecondaryAddressStreetName"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].Columns[AddressCity]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].ExternalColumns[AddressCity]"
                      length="50"
                      lineageId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].Columns[AddressCity]"
                      name="AddressCity"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].Columns[AddressState]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].ExternalColumns[AddressState]"
                      length="50"
                      lineageId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].Columns[AddressState]"
                      name="AddressState"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].Columns[AddressZIP]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].ExternalColumns[AddressZIP]"
                      length="50"
                      lineageId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].Columns[AddressZIP]"
                      name="AddressZIP"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].Columns[AddressBorough]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].ExternalColumns[AddressBorough]"
                      length="50"
                      lineageId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].Columns[AddressBorough]"
                      name="AddressBorough"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].Columns[BoroughCode]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].ExternalColumns[BoroughCode]"
                      length="50"
                      lineageId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].Columns[BoroughCode]"
                      name="BoroughCode"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].Columns[CommunityBoard]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].ExternalColumns[CommunityBoard]"
                      length="50"
                      lineageId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].Columns[CommunityBoard]"
                      name="CommunityBoard"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].Columns[CouncilDistrict]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].ExternalColumns[CouncilDistrict]"
                      length="50"
                      lineageId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].Columns[CouncilDistrict]"
                      name="CouncilDistrict"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].Columns[CensusTract]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].ExternalColumns[CensusTract]"
                      length="50"
                      lineageId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].Columns[CensusTract]"
                      name="CensusTract"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].Columns[Longitude]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].ExternalColumns[Longitude]"
                      length="50"
                      lineageId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].Columns[Longitude]"
                      name="Longitude"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].Columns[Latitude]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].ExternalColumns[Latitude]"
                      length="50"
                      lineageId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].Columns[Latitude]"
                      name="Latitude"
                      truncationRowDisposition="FailComponent" />
                  </outputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].ExternalColumns[DCALicenseNumber]"
                      dataType="wstr"
                      length="50"
                      name="DCALicenseNumber" />
                    <externalMetadataColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].ExternalColumns[LicenseType]"
                      dataType="wstr"
                      length="50"
                      name="LicenseType" />
                    <externalMetadataColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].ExternalColumns[LicenseExpirationDate]"
                      dataType="wstr"
                      length="10"
                      name="LicenseExpirationDate" />
                    <externalMetadataColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].ExternalColumns[LicenseStatus]"
                      dataType="wstr"
                      length="50"
                      name="LicenseStatus" />
                    <externalMetadataColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].ExternalColumns[LicenseCreationDate]"
                      dataType="wstr"
                      length="10"
                      name="LicenseCreationDate" />
                    <externalMetadataColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].ExternalColumns[Industry]"
                      dataType="wstr"
                      length="50"
                      name="Industry" />
                    <externalMetadataColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].ExternalColumns[BusinessName]"
                      dataType="wstr"
                      length="300"
                      name="BusinessName" />
                    <externalMetadataColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].ExternalColumns[BusinessName2]"
                      dataType="wstr"
                      length="100"
                      name="BusinessName2" />
                    <externalMetadataColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].ExternalColumns[AddressBuilding]"
                      dataType="wstr"
                      length="50"
                      name="AddressBuilding" />
                    <externalMetadataColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].ExternalColumns[AddressStreetName]"
                      dataType="wstr"
                      length="75"
                      name="AddressStreetName" />
                    <externalMetadataColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].ExternalColumns[SecondaryAddressStreetName]"
                      dataType="wstr"
                      length="75"
                      name="SecondaryAddressStreetName" />
                    <externalMetadataColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].ExternalColumns[AddressCity]"
                      dataType="wstr"
                      length="50"
                      name="AddressCity" />
                    <externalMetadataColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].ExternalColumns[AddressState]"
                      dataType="wstr"
                      length="50"
                      name="AddressState" />
                    <externalMetadataColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].ExternalColumns[AddressZIP]"
                      dataType="wstr"
                      length="50"
                      name="AddressZIP" />
                    <externalMetadataColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].ExternalColumns[ContactPhoneNumber]"
                      dataType="wstr"
                      length="50"
                      name="ContactPhoneNumber" />
                    <externalMetadataColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].ExternalColumns[AddressBorough]"
                      dataType="wstr"
                      length="50"
                      name="AddressBorough" />
                    <externalMetadataColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].ExternalColumns[BoroughCode]"
                      dataType="wstr"
                      length="50"
                      name="BoroughCode" />
                    <externalMetadataColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].ExternalColumns[CommunityBoard]"
                      dataType="wstr"
                      length="50"
                      name="CommunityBoard" />
                    <externalMetadataColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].ExternalColumns[CouncilDistrict]"
                      dataType="wstr"
                      length="50"
                      name="CouncilDistrict" />
                    <externalMetadataColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].ExternalColumns[BIN]"
                      dataType="wstr"
                      length="50"
                      name="BIN" />
                    <externalMetadataColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].ExternalColumns[BBL]"
                      dataType="wstr"
                      length="50"
                      name="BBL" />
                    <externalMetadataColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].ExternalColumns[NTA]"
                      dataType="wstr"
                      length="50"
                      name="NTA" />
                    <externalMetadataColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].ExternalColumns[CensusTract]"
                      dataType="wstr"
                      length="50"
                      name="CensusTract" />
                    <externalMetadataColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].ExternalColumns[Detail]"
                      dataType="wstr"
                      length="300"
                      name="Detail" />
                    <externalMetadataColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].ExternalColumns[Longitude]"
                      dataType="wstr"
                      length="50"
                      name="Longitude" />
                    <externalMetadataColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].ExternalColumns[Latitude]"
                      dataType="wstr"
                      length="50"
                      name="Latitude" />
                    <externalMetadataColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output].ExternalColumns[Location]"
                      dataType="wstr"
                      length="50"
                      name="Location" />
                  </externalMetadataColumns>
                </output>
                <output
                  refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Error Output]"
                  isErrorOut="true"
                  name="OLE DB Source Error Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Error Output].Columns[DCALicenseNumber]"
                      dataType="wstr"
                      length="50"
                      lineageId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Error Output].Columns[DCALicenseNumber]"
                      name="DCALicenseNumber" />
                    <outputColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Error Output].Columns[LicenseType]"
                      dataType="wstr"
                      length="50"
                      lineageId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Error Output].Columns[LicenseType]"
                      name="LicenseType" />
                    <outputColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Error Output].Columns[LicenseExpirationDate]"
                      dataType="wstr"
                      length="10"
                      lineageId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Error Output].Columns[LicenseExpirationDate]"
                      name="LicenseExpirationDate" />
                    <outputColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Error Output].Columns[LicenseCreationDate]"
                      dataType="wstr"
                      length="10"
                      lineageId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Error Output].Columns[LicenseCreationDate]"
                      name="LicenseCreationDate" />
                    <outputColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Error Output].Columns[Industry]"
                      dataType="wstr"
                      length="50"
                      lineageId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Error Output].Columns[Industry]"
                      name="Industry" />
                    <outputColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Error Output].Columns[BusinessName]"
                      dataType="wstr"
                      length="300"
                      lineageId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Error Output].Columns[BusinessName]"
                      name="BusinessName" />
                    <outputColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Error Output].Columns[BusinessName2]"
                      dataType="wstr"
                      length="100"
                      lineageId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Error Output].Columns[BusinessName2]"
                      name="BusinessName2" />
                    <outputColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Error Output].Columns[AddressBuilding]"
                      dataType="wstr"
                      length="50"
                      lineageId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Error Output].Columns[AddressBuilding]"
                      name="AddressBuilding" />
                    <outputColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Error Output].Columns[AddressStreetName]"
                      dataType="wstr"
                      length="75"
                      lineageId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Error Output].Columns[AddressStreetName]"
                      name="AddressStreetName" />
                    <outputColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Error Output].Columns[SecondaryAddressStreetName]"
                      dataType="wstr"
                      length="75"
                      lineageId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Error Output].Columns[SecondaryAddressStreetName]"
                      name="SecondaryAddressStreetName" />
                    <outputColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Error Output].Columns[AddressCity]"
                      dataType="wstr"
                      length="50"
                      lineageId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Error Output].Columns[AddressCity]"
                      name="AddressCity" />
                    <outputColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Error Output].Columns[AddressState]"
                      dataType="wstr"
                      length="50"
                      lineageId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Error Output].Columns[AddressState]"
                      name="AddressState" />
                    <outputColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Error Output].Columns[AddressZIP]"
                      dataType="wstr"
                      length="50"
                      lineageId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Error Output].Columns[AddressZIP]"
                      name="AddressZIP" />
                    <outputColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Error Output].Columns[AddressBorough]"
                      dataType="wstr"
                      length="50"
                      lineageId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Error Output].Columns[AddressBorough]"
                      name="AddressBorough" />
                    <outputColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Error Output].Columns[BoroughCode]"
                      dataType="wstr"
                      length="50"
                      lineageId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Error Output].Columns[BoroughCode]"
                      name="BoroughCode" />
                    <outputColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Error Output].Columns[CommunityBoard]"
                      dataType="wstr"
                      length="50"
                      lineageId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Error Output].Columns[CommunityBoard]"
                      name="CommunityBoard" />
                    <outputColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Error Output].Columns[CouncilDistrict]"
                      dataType="wstr"
                      length="50"
                      lineageId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Error Output].Columns[CouncilDistrict]"
                      name="CouncilDistrict" />
                    <outputColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Error Output].Columns[CensusTract]"
                      dataType="wstr"
                      length="50"
                      lineageId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Error Output].Columns[CensusTract]"
                      name="CensusTract" />
                    <outputColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Error Output].Columns[Longitude]"
                      dataType="wstr"
                      length="50"
                      lineageId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Error Output].Columns[Longitude]"
                      name="Longitude" />
                    <outputColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Error Output].Columns[Latitude]"
                      dataType="wstr"
                      length="50"
                      lineageId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Error Output].Columns[Latitude]"
                      name="Latitude" />
                    <outputColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
          </components>
          <paths>
            <path
              refId="Package\Ensure correctness of license data.Paths[BusinessName exists]"
              endId="Package\Ensure correctness of license data\Filter out rows with empty LicenseCreationDate.Inputs[Conditional Split Input]"
              name="BusinessName exists"
              startId="Package\Ensure correctness of license data\Filter out rows with empty BusinessName.Outputs[BusinessName exists]" />
            <path
              refId="Package\Ensure correctness of license data.Paths[BusinessName is empty]"
              endId="Package\Ensure correctness of license data\Do something 1.Inputs[Derived Column Input]"
              name="BusinessName is empty"
              startId="Package\Ensure correctness of license data\Filter out rows with empty BusinessName.Outputs[Conditional Split Error Output]" />
            <path
              refId="Package\Ensure correctness of license data.Paths[LicenseCreationDate exists]"
              endId="Package\Ensure correctness of license data\Data Conversion.Inputs[Data Conversion Input]"
              name="LicenseCreationDate exists"
              startId="Package\Ensure correctness of license data\Filter out rows with empty LicenseCreationDate.Outputs[LicenseCreationDate exists]" />
            <path
              refId="Package\Ensure correctness of license data.Paths[LicenseCreationDate is empty]"
              endId="Package\Ensure correctness of license data\Do something 2.Inputs[Derived Column Input]"
              name="LicenseCreationDate is empty"
              startId="Package\Ensure correctness of license data\Filter out rows with empty LicenseCreationDate.Outputs[Conditional Split Error Output]" />
            <path
              refId="Package\Ensure correctness of license data.Paths[OLE DB Source Output]"
              endId="Package\Ensure correctness of license data\Filter out rows with empty BusinessName.Inputs[Conditional Split Input]"
              name="OLE DB Source Output"
              startId="Package\Ensure correctness of license data\Get selected columns from extracted license data.Outputs[OLE DB Source Output]" />
          </paths>
        </pipeline>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Ensure DWSTAGE and DW schemas exist"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{3a5bb444-605c-4a8b-80c3-5448bfbae3de}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Ensure DWSTAGE and DW schemas exist"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2019; © 2019 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{2AE594AF-1E0E-4046-88A5-B26D8D809332}"
          SQLTask:SqlStatementSource="IF NOT EXISTS (&#xA;    SELECT *&#xA;    FROM [sys].[schemas]&#xA;    WHERE [name] = N'DWSTAGE'&#xA;)&#xA;EXEC('CREATE SCHEMA [DWSTAGE]');&#xA;&#xA;IF NOT EXISTS (&#xA;    SELECT *&#xA;    FROM [sys].[schemas]&#xA;    WHERE [name] = N'DW'&#xA;)&#xA;EXEC('CREATE SCHEMA [DW]');" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Ensure needed functions exist"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{3ac8a253-4d7b-4b2c-a839-4024b45c92f1}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Ensure needed functions exist"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2019; © 2019 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="1">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{2AE594AF-1E0E-4046-88A5-B26D8D809332}"
          SQLTask:SqlStatementSource="CREATE OR ALTER FUNCTION TOPROPERCASE(@str AS NVARCHAR(MAX)) RETURNS NVARCHAR(MAX)&#xA;AS&#xA;BEGIN&#xA;    DECLARE @reset BIT;&#xA;    DECLARE @output NVARCHAR(MAX);&#xA;    DECLARE @i INT;&#xA;    DECLARE @c CHAR(1);&#xA;&#xA;    IF @str IS NULL&#xA;        RETURN NULL;&#xA;&#xA;    SELECT @reset = 1, @i = 1, @output = '';&#xA;&#xA;    WHILE (@i &lt;= LEN(@str))&#xA;        SELECT @c = SUBSTRING(@str, @i, 1),&#xA;               @output = @output + CASE WHEN @reset = 1 THEN UPPER(@c) ELSE LOWER(@c) END,&#xA;               @reset = CASE WHEN @c LIKE '[a-zA-Z]' THEN 0 ELSE 1 END,&#xA;               @i = @i + 1&#xA;    RETURN @output;&#xA;END;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Ensure staging tables, dimensions and fact tables exist"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{a9f89b0a-9d63-4990-9f53-d6af43e528b5}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Ensure staging tables, dimensions and fact tables exist"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2019; © 2019 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{2AE594AF-1E0E-4046-88A5-B26D8D809332}"
          SQLTask:SqlStatementSource="IF NOT EXISTS (&#xA;    SELECT 1&#xA;    FROM sysobjects&#xA;    WHERE name = 'LicenseExtract' AND xtype = 'U'&#xA;)&#xA;CREATE TABLE [DWSTAGE].[LicenseExtract] (&#xA;    [SourceRowNumber] int NOT NULL UNIQUE,&#xA;    [DCALicenseNumber] nvarchar(50) NOT NULL,&#xA;    [LicenseType] nvarchar(50) NOT NULL,&#xA;    [LicenseExpirationDate] nvarchar(50) NOT NULL,&#xA;    [LicenseStatus] nvarchar(50) NOT NULL,&#xA;    [LicenseCreationDate] nvarchar(50) NOT NULL,&#xA;    [Industry] nvarchar(50) NOT NULL,&#xA;    [BusinessName] nvarchar(300) NOT NULL,&#xA;    [BusinessName2] nvarchar(100) NOT NULL,&#xA;    [AddressBuilding] nvarchar(50) NOT NULL,&#xA;    [AddressStreetName] nvarchar(75) NOT NULL,&#xA;    [SecondaryAddressStreetName] nvarchar(75) NOT NULL,&#xA;    [AddressCity] nvarchar(50) NOT NULL,&#xA;    [AddressState] nvarchar(50) NOT NULL,&#xA;    [AddressZIP] nvarchar(50) NOT NULL,&#xA;    [ContactPhoneNumber] nvarchar(50) NOT NULL,&#xA;    [AddressBorough] nvarchar(50) NOT NULL,&#xA;    [BoroughCode] nvarchar(50) NOT NULL,&#xA;    [CommunityBoard] nvarchar(50) NOT NULL,&#xA;    [CouncilDistrict] nvarchar(50) NOT NULL,&#xA;    [BIN] nvarchar(50) NOT NULL,&#xA;    [BBL] nvarchar(50) NOT NULL,&#xA;    [NTA] nvarchar(50) NOT NULL,&#xA;    [CensusTract] nvarchar(50) NOT NULL,&#xA;    [Detail] nvarchar(300) NOT NULL,&#xA;    [Longitude] nvarchar(50) NOT NULL,&#xA;    [Latitude] nvarchar(50) NOT NULL,&#xA;    [Location] nvarchar(50) NOT NULL&#xA;)&#xA;GO&#xA;&#xA;IF NOT EXISTS (&#xA;    SELECT 1&#xA;    FROM sysobjects&#xA;    WHERE name = 'FeeExtract' AND xtype = 'U'&#xA;)&#xA;CREATE TABLE [DWSTAGE].[FeeExtract] (&#xA;    [SourceRowNumber] int NOT NULL UNIQUE,&#xA;    [RecordId] nvarchar(50) NOT NULL,&#xA;    [RecordType] nvarchar(50) NOT NULL,&#xA;    [BusinessName] nvarchar(300) NOT NULL,&#xA;    [BusinessName2] nvarchar(100) NOT NULL,&#xA;    [Industry] nvarchar(50) NOT NULL,&#xA;    [FeeSequenceId] nvarchar(50) NOT NULL,&#xA;    [FeeType] nvarchar(50) NOT NULL,&#xA;    [FeeDescription] nvarchar(100) NOT NULL,&#xA;    [FeeAmount] nvarchar(50) NOT NULL,&#xA;    [FeeDate] nvarchar(50) NOT NULL,&#xA;    [FeeStatus] nvarchar(50) NOT NULL&#xA;)&#xA;GO&#xA;&#xA;IF NOT EXISTS (&#xA;    SELECT 1&#xA;    FROM sysobjects&#xA;    WHERE name = 'PaymentExtract' AND xtype = 'U'&#xA;)&#xA;CREATE TABLE [DWSTAGE].[PaymentExtract] (&#xA;    [SourceRowNumber] int NOT NULL UNIQUE,&#xA;    [RecordId] nvarchar(50) NOT NULL,&#xA;    [BusinessName] nvarchar(300) NOT NULL,&#xA;    [BusinessName2] nvarchar(100) NOT NULL,&#xA;    [Industry] nvarchar(50) NOT NULL,&#xA;    [FeeSequenceId] nvarchar(50) NOT NULL,&#xA;    [FeeType] nvarchar(50) NOT NULL,&#xA;    [FeeDescription] nvarchar(100) NOT NULL,&#xA;    [RecordType] nvarchar(50) NOT NULL,&#xA;    [PaymentAmount] nvarchar(50) NOT NULL,&#xA;    [TransactionType] nvarchar(50) NOT NULL,&#xA;    [PaymentDate] nvarchar(50) NOT NULL&#xA;)&#xA;GO&#xA;&#xA;IF NOT EXISTS (&#xA;    SELECT 1&#xA;    FROM sysobjects&#xA;    WHERE name = 'LicenseStage' AND xtype = 'U'&#xA;)&#xA;CREATE TABLE [DWSTAGE].[LicenseStage] (&#xA;    [DCALicenseNumber] nvarchar(50),&#xA;    [LicenseCreationDate] date,&#xA;    [LicenseExpirationDate] date,&#xA;    [LicenseType] nvarchar(50),&#xA;    [BusinessName] nvarchar(300),&#xA;    [BusinessName2] nvarchar(100),&#xA;    [Industry] nvarchar(50),&#xA;    [AddressBuilding] nvarchar(50),&#xA;    [AddressStreetName] nvarchar(75),&#xA;    [SecondaryAddressStreetName] nvarchar(75),&#xA;    [AddressCity] nvarchar(50),&#xA;    [AddressState] nvarchar(50),&#xA;    [AddressZIP] nvarchar(50),&#xA;    [AddressBorough] nvarchar(50),&#xA;    [BoroughCode] nvarchar(50),&#xA;    [CommunityBoard] nvarchar(50),&#xA;    [CouncilDistrict] nvarchar(50),&#xA;    [CensusTract] nvarchar(50),&#xA;    [Longitude] nvarchar(50),&#xA;    [Latitude] nvarchar(50)&#xA;)&#xA;GO&#xA;&#xA;IF NOT EXISTS (&#xA;    SELECT 1&#xA;    FROM sysobjects&#xA;    WHERE name = 'FeeStage' AND xtype = 'U'&#xA;)&#xA;CREATE TABLE [DWSTAGE].[FeeStage] (&#xA;    [FeeSequenceId] int,&#xA;    [BusinessName] nvarchar(300),&#xA;    [BusinessName2] nvarchar(100),&#xA;    [FeeDate] date,&#xA;    [RecordType] nvarchar(50),&#xA;    [Industry] nvarchar(50),&#xA;    [FeeType] nvarchar(50),&#xA;    [FeeDescription] nvarchar(100),&#xA;    [FeeAmount] numeric(18,2)&#xA;)&#xA;GO&#xA;&#xA;IF NOT EXISTS (&#xA;    SELECT 1&#xA;    FROM sysobjects&#xA;    WHERE name = 'PaymentStage' AND xtype = 'U'&#xA;)&#xA;CREATE TABLE [DWSTAGE].[PaymentStage] (&#xA;    [FeeSequenceId] int,&#xA;    [PaymentAmount] numeric(18,2),&#xA;    [TransactionType] nvarchar(50)&#xA;)&#xA;GO&#xA;&#xA;IF NOT EXISTS (&#xA;    SELECT 1&#xA;    FROM sysobjects&#xA;    WHERE name = 'BusinessDim' AND xtype = 'U'&#xA;)&#xA;CREATE TABLE [DW].[BusinessDim] (&#xA;    [BusinessId] int IDENTITY(1,1),&#xA;    [BusinessType] nvarchar(50),&#xA;    [BusinessName] nvarchar(300),&#xA;    [BusinessName2] nvarchar(100),&#xA;    [AddressBuilding] nvarchar(50),&#xA;    [AddressStreetName] nvarchar(75),&#xA;    [SecondaryAddressStreetName] nvarchar(75),&#xA;    [AddressCity] nvarchar(50),&#xA;    [AddressState] nvarchar(50),&#xA;    [AddressZip] nvarchar(50),&#xA;    [AddressBorough] nvarchar(50),&#xA;    [BoroughCode] nvarchar(50),&#xA;    [CommunityBoard] nvarchar(50),&#xA;    [CouncilDistrict] nvarchar(50),&#xA;    [CensusTract] nvarchar(50),&#xA;    [Longitude] nvarchar(50),&#xA;    [Latitude] nvarchar(50),&#xA;    CONSTRAINT [PK_BusinessDim] PRIMARY KEY ([BusinessId])&#xA;)&#xA;GO&#xA;&#xA;IF NOT EXISTS (&#xA;    SELECT 1&#xA;    FROM sysobjects&#xA;    WHERE name = 'IndustryDim' AND xtype = 'U'&#xA;)&#xA;CREATE TABLE [DW].[IndustryDim] (&#xA;    [IndustryId] int IDENTITY(1,1),&#xA; [Industry] nvarchar(50),&#xA;    CONSTRAINT [PK_IndustryDim] PRIMARY KEY ([IndustryId])&#xA;)&#xA;GO&#xA;&#xA;IF NOT EXISTS (&#xA;    SELECT 1&#xA;    FROM sysobjects&#xA;    WHERE name = 'FeeDim' AND xtype = 'U'&#xA;)&#xA;CREATE TABLE [DW].[FeeDim] (&#xA;    [FeeId] int IDENTITY(1,1),&#xA;    [IndustryId] int,&#xA;    [RecordType] nvarchar(50),&#xA;    [FeeType] nvarchar(50),&#xA;    [FeeDescription] nvarchar(100),&#xA;    CONSTRAINT [PK_FeeDim] PRIMARY KEY ([FeeId]),&#xA;    CONSTRAINT [FK_FeeDim_ToIndustryDim] FOREIGN KEY ([IndustryId]) REFERENCES [DW].[IndustryDim]([IndustryId])&#xA;)&#xA;GO&#xA;&#xA;IF NOT EXISTS (&#xA;    SELECT 1&#xA;    FROM sysobjects&#xA;    WHERE name = 'TimeDim' AND xtype = 'U'&#xA;)&#xA;CREATE TABLE [DW].[TimeDim] (&#xA;    [Date] date,&#xA;    [Day] int,&#xA;    [DayName] nvarchar(9),&#xA;    [Weekday] int,&#xA;    [Week] int,&#xA;    [Month] int,&#xA;    [MonthName] nvarchar(9),&#xA;    [Quarter] int,&#xA;    [Year] int,&#xA;    CONSTRAINT [PK_TimeDim] PRIMARY KEY ([Date])&#xA;)&#xA;GO&#xA;&#xA;IF NOT EXISTS (&#xA;    SELECT 1&#xA;    FROM sysobjects&#xA;    WHERE name = 'TransactionTypeDim' AND xtype = 'U'&#xA;)&#xA;CREATE TABLE [DW].[TransactionTypeDim] (&#xA;    [TransactionTypeId] int IDENTITY(1,1),&#xA;    [TransactionType] nvarchar(50),&#xA;    CONSTRAINT [PK_TransactionTypeDim] PRIMARY KEY ([TransactionTypeId])&#xA;)&#xA;GO&#xA;&#xA;IF NOT EXISTS (&#xA;    SELECT 1&#xA;    FROM sysobjects&#xA;    WHERE name = 'LicenseFact' AND xtype = 'U'&#xA;)&#xA;CREATE TABLE [DW].[LicenseFact] (&#xA;    [CreationDate] date,&#xA;    [ExpirationDate] date,&#xA;    [BusinessId] int,&#xA;    [IndustryId] int,&#xA;    [LicenseNumber] nvarchar(50),&#xA;    [DurationInDays] int,&#xA;    CONSTRAINT [FK_LicenseFact_ToTimeDim_CreationDate] FOREIGN KEY ([CreationDate]) REFERENCES [DW].[TimeDim]([Date]),&#xA;    CONSTRAINT [FK_LicenseFact_ToTimeDim_ExpirationDate] FOREIGN KEY ([ExpirationDate]) REFERENCES [DW].[TimeDim]([Date]),&#xA;    CONSTRAINT [FK_LicenseFact_ToBusinessDim] FOREIGN KEY ([BusinessId]) REFERENCES [DW].[BusinessDim]([BusinessId]),&#xA;    CONSTRAINT [FK_LicenseFact_ToIndustryDim] FOREIGN KEY ([IndustryId]) REFERENCES [DW].[IndustryDim]([IndustryId])&#xA;)&#xA;GO&#xA;&#xA;IF NOT EXISTS (&#xA;    SELECT 1&#xA;    FROM sysobjects&#xA;    WHERE name = 'PaymentFact' AND xtype = 'U'&#xA;)&#xA;CREATE TABLE [DW].[PaymentFact] (&#xA;    [PaymentDate] date,&#xA;    [FeeId] int,&#xA;    [BusinessId] int,&#xA;    [TransactionTypeId] int,&#xA;    [FeeSequenceId] int,&#xA;    [FeeAmount] numeric(18,2),&#xA;    [PaymentAmount] numeric(18,2),&#xA;    CONSTRAINT [FK_PaymentFact_ToTimeDim] FOREIGN KEY ([PaymentDate]) REFERENCES [DW].[TimeDim]([Date]),&#xA;    CONSTRAINT [FK_PaymentFact_ToFeeDim] FOREIGN KEY ([FeeId]) REFERENCES [DW].[FeeDim]([FeeId]),&#xA;    CONSTRAINT [FK_PaymentFact_ToBusinessDim] FOREIGN KEY ([BusinessId]) REFERENCES [DW].[BusinessDim]([BusinessId]),&#xA;    CONSTRAINT [FK_PaymentFact_ToTransactionTypeDim] FOREIGN KEY ([TransactionTypeId]) REFERENCES [DW].[TransactionTypeDim]([TransactionTypeId])&#xA;)&#xA;GO" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Extract fee data"
      DTS:CreationName="Microsoft.Pipeline"
      DTS:Description="Data Flow Task"
      DTS:DTSID="{00d9aeef-baf6-44bd-9401-0695d396cfd3}"
      DTS:ExecutableType="Microsoft.Pipeline"
      DTS:LocaleID="-1"
      DTS:ObjectName="Extract fee data"
      DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
      <DTS:Variables />
      <DTS:ObjectData>
        <pipeline
          version="1">
          <components>
            <component
              refId="Package\Extract fee data\Extract fee data from dataset"
              componentClassID="Microsoft.FlatFileSource"
              contactInfo="Flat File Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
              description="Flat File Source"
              localeId="2057"
              name="Extract fee data from dataset"
              usesDispositions="true"
              version="1">
              <properties>
                <property
                  dataType="System.Boolean"
                  description="Specifies whether zero-length columns are treated as null."
                  name="RetainNulls">false</property>
                <property
                  dataType="System.String"
                  description="Specifies the name of an output column containing the file name. If no name is specified, no output column containing the file name will be generated."
                  name="FileNameColumnName"></property>
              </properties>
              <connections>
                <connection
                  refId="Package\Extract fee data\Extract fee data from dataset.Connections[FlatFileConnection]"
                  connectionManagerID="Package.ConnectionManagers[Fees]"
                  connectionManagerRefId="Package.ConnectionManagers[Fees]"
                  name="FlatFileConnection" />
              </connections>
              <outputs>
                <output
                  refId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output]"
                  name="Flat File Source Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].Columns[RecordId]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].ExternalColumns[RECORD ID]"
                      length="50"
                      lineageId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].Columns[RecordId]"
                      name="RecordId"
                      truncationRowDisposition="RedirectRow">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].Columns[RecordType]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].ExternalColumns[RECORD TYPE]"
                      length="50"
                      lineageId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].Columns[RecordType]"
                      name="RecordType"
                      truncationRowDisposition="RedirectRow">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].Columns[BusinessName]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].ExternalColumns[BUSINESS NAME]"
                      length="300"
                      lineageId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].Columns[BusinessName]"
                      name="BusinessName"
                      truncationRowDisposition="RedirectRow">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].Columns[BusinessName2]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].ExternalColumns[BUSINESS NAME2]"
                      length="100"
                      lineageId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].Columns[BusinessName2]"
                      name="BusinessName2"
                      truncationRowDisposition="RedirectRow">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].Columns[Industry]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].ExternalColumns[INDUSTRY]"
                      length="50"
                      lineageId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].Columns[Industry]"
                      name="Industry"
                      truncationRowDisposition="RedirectRow">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].Columns[FeeSequenceId]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].ExternalColumns[FEE SEQUENCE ID]"
                      length="50"
                      lineageId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].Columns[FeeSequenceId]"
                      name="FeeSequenceId"
                      truncationRowDisposition="RedirectRow">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].Columns[FeeType]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].ExternalColumns[FEE TYPE]"
                      length="50"
                      lineageId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].Columns[FeeType]"
                      name="FeeType"
                      truncationRowDisposition="RedirectRow">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].Columns[FeeDescription]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].ExternalColumns[FEE DESCRIPTION]"
                      length="100"
                      lineageId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].Columns[FeeDescription]"
                      name="FeeDescription"
                      truncationRowDisposition="RedirectRow">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].Columns[FeeAmount]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].ExternalColumns[FEE AMOUNT]"
                      length="50"
                      lineageId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].Columns[FeeAmount]"
                      name="FeeAmount"
                      truncationRowDisposition="RedirectRow">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].Columns[FeeDate]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="RedirectRow"
                      externalMetadataColumnId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].ExternalColumns[FEE DATE]"
                      length="50"
                      lineageId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].Columns[FeeDate]"
                      name="FeeDate"
                      truncationRowDisposition="RedirectRow">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].Columns[FeeStatus]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].ExternalColumns[FEE STATUS]"
                      length="50"
                      lineageId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].Columns[FeeStatus]"
                      name="FeeStatus"
                      truncationRowDisposition="RedirectRow">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                  </outputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].ExternalColumns[RECORD ID]"
                      dataType="wstr"
                      length="50"
                      name="RECORD ID" />
                    <externalMetadataColumn
                      refId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].ExternalColumns[RECORD TYPE]"
                      dataType="wstr"
                      length="50"
                      name="RECORD TYPE" />
                    <externalMetadataColumn
                      refId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].ExternalColumns[BUSINESS NAME]"
                      dataType="wstr"
                      length="300"
                      name="BUSINESS NAME" />
                    <externalMetadataColumn
                      refId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].ExternalColumns[BUSINESS NAME2]"
                      dataType="wstr"
                      length="100"
                      name="BUSINESS NAME2" />
                    <externalMetadataColumn
                      refId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].ExternalColumns[INDUSTRY]"
                      dataType="wstr"
                      length="50"
                      name="INDUSTRY" />
                    <externalMetadataColumn
                      refId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].ExternalColumns[FEE SEQUENCE ID]"
                      dataType="wstr"
                      length="50"
                      name="FEE SEQUENCE ID" />
                    <externalMetadataColumn
                      refId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].ExternalColumns[FEE TYPE]"
                      dataType="wstr"
                      length="50"
                      name="FEE TYPE" />
                    <externalMetadataColumn
                      refId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].ExternalColumns[FEE DESCRIPTION]"
                      dataType="wstr"
                      length="100"
                      name="FEE DESCRIPTION" />
                    <externalMetadataColumn
                      refId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].ExternalColumns[FEE AMOUNT]"
                      dataType="wstr"
                      length="50"
                      name="FEE AMOUNT" />
                    <externalMetadataColumn
                      refId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].ExternalColumns[FEE DATE]"
                      dataType="wstr"
                      length="50"
                      name="FEE DATE" />
                    <externalMetadataColumn
                      refId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].ExternalColumns[FEE STATUS]"
                      dataType="wstr"
                      length="50"
                      name="FEE STATUS" />
                  </externalMetadataColumns>
                </output>
                <output
                  refId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Error Output]"
                  isErrorOut="true"
                  name="Flat File Source Error Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Error Output].Columns[Flat File Source Error Output Column]"
                      codePage="65001"
                      dataType="text"
                      description="Flat File Source Error Output Column"
                      lineageId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Error Output].Columns[Flat File Source Error Output Column]"
                      name="Flat File Source Error Output Column" />
                    <outputColumn
                      refId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Extract fee data\Generate source row number"
              componentClassID="Microsoft.ManagedComponentHost"
              contactInfo="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum.;Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;12"
              description="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum."
              name="Generate source row number"
              version="12">
              <properties>
                <property
                  dataType="System.String"
                  description="Stores the source code of the component"
                  isArray="true"
                  name="SourceCode"
                  state="cdata">
                  <arrayElements
                    arrayElementCount="30">
                    <arrayElement
                      dataType="System.String"><![CDATA[ComponentWrapper.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public override void ProcessInput(int InputID, string InputName, PipelineBuffer Buffer, OutputNameMap OutputMap)
    {

        if (InputName.Equals(@"Input 0", StringComparison.Ordinal))
        {
            Input0_ProcessInput(new Input0Buffer(Buffer, GetColumnIndexes(InputID), OutputMap));
        }

    }

    public virtual void Input0_ProcessInput(Input0Buffer Buffer)
    {
        while (Buffer.NextRow())
        {
            Input0_ProcessInputRow(Buffer);
        }
    }

    public virtual void Input0_ProcessInputRow(Input0Buffer Row)
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Resources.resx]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[main.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[#region Help:  Introduction to the Script Component
/* The Script Component allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services data flow.
 *
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script component. */
#endregion

#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
#endregion

/// <summary>
/// This is the class to which to add your code.  Do not change the name, attributes, or parent
/// of this class.
/// </summary>
[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{
    #region Help:  Using Integration Services variables and parameters
    /* To use a variable in this script, first ensure that the variable has been added to
     * either the list contained in the ReadOnlyVariables property or the list contained in
     * the ReadWriteVariables property of this script component, according to whether or not your
     * code needs to write into the variable.  To do so, save this script, close this instance of
     * Visual Studio, and update the ReadOnlyVariables and ReadWriteVariables properties in the
     * Script Transformation Editor window.
     * To use a parameter in this script, follow the same steps. Parameters are always read-only.
     *
     * Example of reading from a variable or parameter:
     *  DateTime startTime = Variables.MyStartTime;
     *
     * Example of writing to a variable:
     *  Variables.myStringVariable = "new value";
     */
    #endregion

    #region Help:  Using Integration Services Connnection Managers
    /* Some types of connection managers can be used in this script component.  See the help topic
     * "Working with Connection Managers Programatically" for details.
     *
     * To use a connection manager in this script, first ensure that the connection manager has
     * been added to either the list of connection managers on the Connection Managers page of the
     * script component editor.  To add the connection manager, save this script, close this instance of
     * Visual Studio, and add the Connection Manager to the list.
     *
     * If the component needs to hold a connection open while processing rows, override the
     * AcquireConnections and ReleaseConnections methods.
     * 
     * Example of using an ADO.Net connection manager to acquire a SqlConnection:
     *  object rawConnection = Connections.SalesDB.AcquireConnection(transaction);
     *  SqlConnection salesDBConn = (SqlConnection)rawConnection;
     *
     * Example of using a File connection manager to acquire a file path:
     *  object rawConnection = Connections.Prices_zip.AcquireConnection(transaction);
     *  string filePath = (string)rawConnection;
     *
     * Example of releasing a connection manager:
     *  Connections.SalesDB.ReleaseConnection(rawConnection);
     */
    #endregion

    #region Help:  Firing Integration Services Events
    /* This script component can fire events.
     *
     * Example of firing an error event:
     *  ComponentMetaData.FireError(10, "Process Values", "Bad value", "", 0, out cancel);
     *
     * Example of firing an information event:
     *  ComponentMetaData.FireInformation(10, "Process Values", "Processing has started", "", 0, fireAgain);
     *
     * Example of firing a warning event:
     *  ComponentMetaData.FireWarning(10, "Process Values", "No rows were received", "", 0);
     */
    #endregion

    private int _sourceRowNumber;

    /// <summary>
    /// This method is called once, before rows begin to be processed in the data flow.
    ///
    /// You can remove this method if you don't need to do anything here.
    /// </summary>
    public override void PreExecute()
    {
        base.PreExecute();
        _sourceRowNumber = 1;
    }

    /// <summary>
    /// This method is called after all the rows have passed through this component.
    ///
    /// You can delete this method if you don't need to do anything here.
    /// </summary>
    public override void PostExecute()
    {
        base.PostExecute();
        /*
         * Add your code here
         */
    }

    /// <summary>
    /// This method is called once for every row that passes through the component from Input0.
    ///
    /// Example of reading a value from a column in the the row:
    ///  string zipCode = Row.ZipCode
    ///
    /// Example of writing a value to a column in the row:
    ///  Row.ZipCode = zipCode
    /// </summary>
    /// <param name="Row">The row that is currently passing through the component</param>
    public override void Input0_ProcessInputRow(Input0Buffer Row)
    {
        Row.SourceRowNumber = _sourceRowNumber++;
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[BufferWrapper.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class Input0Buffer: ScriptBuffer

{
    public Input0Buffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public Int32 SourceRowNumber
    {
        set
        {
            this[0] = value;
        }
    }
    public bool SourceRowNumber_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public bool NextRow()
    {
        return base.NextRow();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Settings.Designer.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_f6edec8c26f148dfb4626908035c0461.Properties.Settings.get_Default():SC_f6edec8c26f148dfb4626908035c0461.Properties.Sett" +
    "ings")]

namespace SC_f6edec8c26f148dfb4626908035c0461.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[SC_f6edec8c26f148dfb4626908035c0461.csproj]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{91734a36-4557-46c1-ba68-c130a041acc4}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>SC_f6edec8c26f148dfb4626908035c0461</RootNamespace>
    <AssemblyName>SC_f6edec8c26f148dfb4626908035c0461</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.TxScript, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Compile Include="main.cs" />
    <Compile Include="BufferWrapper.cs" />
    <Compile Include="ComponentWrapper.cs" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="ScriptComponent" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="" DebugInfoCommandLine="" DebugInfoWorkingDir="" IconImageList="" />
        <Host Name="ScriptComponent" GeneratedNamespace="SC_f6edec8c26f148dfb4626908035c0461" IconIndex="0"></Host>
        <ProjectClient>
          <HostIdentifier>SSIS_SC150</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Project]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF16LE]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:Language>msBuild</msb:Language>
    <msb:CodeName>SC_f6edec8c26f148dfb4626908035c0461</msb:CodeName>
    <msb:DisplayName>SC_f6edec8c26f148dfb4626908035c0461</msb:DisplayName>
    <msb:ProjectId>{0D29BABE-899D-4F43-84D2-4A434AFC635C}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="SC_f6edec8c26f148dfb4626908035c0461.csproj" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="main.cs" />
    <msb:File Include="BufferWrapper.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ComponentWrapper.cs" />
  </msb:ItemGroup>
</c:Project>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\AssemblyInfo.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_f6edec8c26f148dfb4626908035c0461")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("SC_f6edec8c26f148dfb4626908035c0461")]
[assembly: AssemblyCopyright("Copyright @  2021")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.0.0")]
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Settings.settings]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Resources.Designer.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_f6edec8c26f148dfb4626908035c0461.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_f6edec8c26f148dfb4626908035c0461.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_f6edec8c26f148dfb4626908035c0461.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace SC_f6edec8c26f148dfb4626908035c0461.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_f6edec8c26f148dfb4626908035c0461.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement>
                  </arrayElements>
                </property>
                <property
                  dataType="System.String"
                  description="Stores the binary representation of the component"
                  isArray="true"
                  name="BinaryCode"
                  state="cdata">
                  <arrayElements
                    arrayElementCount="2">
                    <arrayElement
                      dataType="System.String"><![CDATA[SC_f6edec8c26f148dfb4626908035c0461.dll]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAHbVtGAAAAAAAAAAAOAAIiALATAAABIAAAAIAAAAAAAASjEA
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAPgwAABPAAAAAEAAAEgEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAUBEAAAAgAAAAEgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAEgEAAAAQAAAAAYAAAAUAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAGgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAAAs
MQAAAAAAAEgAAAACAAUArCEAAJQOAAABAAAAAAAAAEAwAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAADoCKBAAAAoCF30BAAAEKh4CKBEAAAoqABMwBAAYAAAAAQAA
EQMCAnsBAAAECgYXWH0BAAAEBm8GAAAGKh4CKAoAAAYqKgIDBAUoEgAACio6AhYDjBoAAAEoEwAA
CipaAywIAhYoFAAACipyAQAAcHMVAAAKeh4CKBYAAAoqHgIoFwAACip+AigYAAAKAgJzDgAABn0C
AAAEAgJzDwAABn0DAAAEKpIEcp4AAHAabxkAAAosFQIFAgMoGgAACg4EcwUAAAZvDAAABipKKwcC
A28NAAAGA28IAAAGLfEqBio6AigbAAAKAgN9BAAABCo6AigbAAAKAgN9BQAABCoeAigbAAAKKq5+
BgAABC0ecq4AAHDQBwAAAigcAAAKbx0AAApzHgAACoAGAAAEfgYAAAQqGn4HAAAEKh4CgAcAAAQq
Gn4IAAAEKh4CKB8AAAoqLnMVAAAGgAgAAAQqAEJTSkIBAAEAAAAAAAwAAAB2NC4wLjMwMzE5AAAA
AAUAbAAAACwFAAAjfgAAmAUAADgGAAAjU3RyaW5ncwAAAADQCwAAIAEAACNVUwDwDAAAEAAAACNH
VUlEAAAAAA0AAJQBAAAjQmxvYgAAAAAAAAACAAABVxWiAQkBAAAA+gEzABYAAAEAAAAgAAAACAAA
AAgAAAAWAAAADwAAAB8AAAAQAAAAAQAAAAMAAAAFAAAABgAAAAEAAAAEAAAAAQAAAAAA8AIBAAAA
AAAGAOoBbwQGAH4CbwQGADYBXAQPAOMEAAAGAGMBjAMGAM0BjAMGAK4BjAMGAGUCjAMGAAoCjAMG
ACMCjAMGAHoBjAMGAJUBuQIKAD4CgwAKAC4EgwAOAB8EgwAKANUDgwAKAKkFgwAGAGwFRAMGABkB
XAQGAD8EjwQGAMkDdwMSAOkA2gISAEoB2gISANEAYgMGAP4AbwQGACUARAMGAJ4DRAMGANMCRAMG
ALgDRAMGAKQARAMGAFUARAMGAC4GjAMAAAAAKwAAAAAAAQABAAEAEABXAwAAEAABAAEAAQAQABIE
AAA5AAIABQABABAAiwUAAEUAAgAKAAEAEABgBQAASQAEAA4AAQAQACEFAABJAAUADwAAABAAlgTy
BEkABgAQAAABEABQBfIEYQAIABQAAQABBGcABgBgBWoABgAhBW4AAQCZBXIAAQCZBXIAEQBLA3YA
EQDBAHoAEQBFAH4AUCAAAAAAxgCcAgYAAQBfIAAAAADGAKcCBgABAGggAAAAAMYACwaCAAEAjCAA
AAAAhhhPBAYAAgCUIAAAAACGGE8EHwACAJ8gAAAAAIYI7QMBAAUAriAAAAAAhggYA4gABgDFIAAA
AACGACIGLwAHAM0gAAAAAIYAcwUvAAcA1SAAAAAAhhhPBAYABwD1IAAAAADGAP4FjQAHABohAAAA
AMYB9wWCAAsALSEAAAAAxgELBoIADAAvIQAAAACGGE8ElwANAD4hAAAAAIYYTwSXAA4ATSEAAAAA
gxhPBAYADwBVIQAAAACTCDsEnQAPAIEhAAAAAJMIqQCiAA8AiCEAAAAAkwi1AKcADwCQIQAAAACW
CH8FrQAQAJchAAAAAIYYTwQGABAAnyEAAAAAkRhVBLIAEAAAAAEAJgYAAAEANAQAAAIAKwUAAAMA
4wMAAAEAswIAAAEAswIAAAEANAAAAAIAeQAAAAMANAQAAAQA4wMAAAEANAQAAAEAJgYAAAEArwUA
AAEArwUAAAEAswIJAE8EAQARAE8EBgAZAE8ECgApAE8EEAAxAE8EEAA5AE8EEABBAE8EEABJAE8E
EABRAE8EEABZAE8EEABhAE8EEABpAE8EBgCZAE8EBgC5AE8EFQDJAE8EBgCJAJwCBgCJAKcCBgBx
AE8EHwBxADsDKQBxADMDAQDZAE8EEABxACIGLwBxAHMFLwCJAE8EBgDhAFkFMwCJAD8FOgCRAE8E
BgDxAGcAQADxACoGRwChAE8ETQDBAE8EBgAuAAsAzQAuABMA1gAuABsA9QAuACMA/gAuACsAJwEu
ADMAJwEuADsAJwEuAEMA/gAuAEsALQEuAFMAJwEuAFsARAFDAGMAjgFpAHMA9QCJAHMA9QDjAGsA
jgEBAXsAjgEbAAMAAQAHAAMACAAFAAAA8QO2AAAAHAO6AAAAPwS+AAAAyQDDAAAAgwXIAAEABgAD
AAEABwAFAAIAEQAHAAIAEgAJAAEAEwAJAAIAFAALAASAAAABAAAAAAAAAAAAAAAAAAEAAAAEAAAA
AAAAAAAAAABVADwAAAAAAA8AAAAAAAAAAAAAAF4AuQUAAAAADwAAAAAAAAAAAAAAXgDWBQAAAAAE
AAAAAAAAAAAAAABVAEQDAAAAAAAAAAABAAAAoAQAAAAAAAAAU0NfZjZlZGVjOGMyNmYxNDhkZmI0
NjI2OTA4MDM1YzA0NjEASW50MzIAPE1vZHVsZT4ASW5wdXRJRABtc2NvcmxpYgBkZWZhdWx0SW5z
dGFuY2UAUnVudGltZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUASW5wdXROYW1lAE1pY3Jv
c29mdC5TcWxTZXJ2ZXIuRHRzLlBpcGVsaW5lAFR5cGUAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUA
cmVzb3VyY2VDdWx0dXJlAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAEVkaXRvckJyb3dzYWJsZVN0
YXRlAENvbXBpbGVyR2VuZXJhdGVkQXR0cmlidXRlAERlYnVnZ2VyTm9uVXNlckNvZGVBdHRyaWJ1
dGUARGVidWdnYWJsZUF0dHJpYnV0ZQBFZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUAQXNzZW1ibHlU
aXRsZUF0dHJpYnV0ZQBBc3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBUYXJnZXRGcmFtZXdvcmtB
dHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRp
b25BdHRyaWJ1dGUAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBBc3NlbWJseVByb2R1
Y3RBdHRyaWJ1dGUAQXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAU1NJU1NjcmlwdENvbXBvbmVu
dEVudHJ5UG9pbnRBdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRlAFJ1bnRpbWVDb21w
YXRpYmlsaXR5QXR0cmlidXRlAFByZUV4ZWN1dGUAUG9zdEV4ZWN1dGUAdmFsdWUAU3lzdGVtLlJ1
bnRpbWUuVmVyc2lvbmluZwBTdHJpbmcAU3lzdGVtLkNvbXBvbmVudE1vZGVsAFNDX2Y2ZWRlYzhj
MjZmMTQ4ZGZiNDYyNjkwODAzNWMwNDYxLmRsbABzZXRfU291cmNlUm93TnVtYmVyX0lzTnVsbABT
ZXROdWxsAHNldF9JdGVtAFN5c3RlbQByZXNvdXJjZU1hbgBTY3JpcHRNYWluAFN5c3RlbS5Db25m
aWd1cmF0aW9uAFN5c3RlbS5HbG9iYWxpemF0aW9uAFN5c3RlbS5SZWZsZWN0aW9uAEludmFsaWRP
cGVyYXRpb25FeGNlcHRpb24AU3RyaW5nQ29tcGFyaXNvbgBDdWx0dXJlSW5mbwBPdXRwdXROYW1l
TWFwAE91dHB1dE1hcABzZXRfU291cmNlUm93TnVtYmVyAF9zb3VyY2VSb3dOdW1iZXIASW5wdXQw
QnVmZmVyAFBpcGVsaW5lQnVmZmVyAFNjcmlwdEJ1ZmZlcgBnZXRfUmVzb3VyY2VNYW5hZ2VyAC5j
dG9yAC5jY3RvcgBTeXN0ZW0uRGlhZ25vc3RpY3MAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2
aWNlcwBTeXN0ZW0uUmVzb3VyY2VzAFNDX2Y2ZWRlYzhjMjZmMTQ4ZGZiNDYyNjkwODAzNWMwNDYx
LlByb3BlcnRpZXMuUmVzb3VyY2VzLnJlc291cmNlcwBEZWJ1Z2dpbmdNb2RlcwBTQ19mNmVkZWM4
YzI2ZjE0OGRmYjQ2MjY5MDgwMzVjMDQ2MS5Qcm9wZXJ0aWVzAFZhcmlhYmxlcwBCdWZmZXJDb2x1
bW5JbmRleGVzAEdldENvbHVtbkluZGV4ZXMAU2V0dGluZ3MARXF1YWxzAENvbm5lY3Rpb25zAE9i
amVjdABFbmRPZlJvd3NldABnZXRfRGVmYXVsdABVc2VyQ29tcG9uZW50AFBhcmVudENvbXBvbmVu
dABTY3JpcHRDb21wb25lbnQATWljcm9zb2Z0LlNxbFNlcnZlci5UeFNjcmlwdABNaWNyb3NvZnQu
U3FsU2VydmVyLlBpcGVsaW5lSG9zdABJbnB1dDBfUHJvY2Vzc0lucHV0AElucHV0MF9Qcm9jZXNz
SW5wdXRSb3cATmV4dFJvdwBnZXRfQXNzZW1ibHkAAACAm0kAcwBOAHUAbABsACAAcAByAG8AcABl
AHIAdAB5ACAAYwBhAG4AbgBvAHQAIABiAGUAIABzAGUAdAAgAHQAbwAgAEYAYQBsAHMAZQAuACAA
QQBzAHMAaQBnAG4AIABhACAAdgBhAGwAdQBlACAAdABvACAAdABoAGUAIABjAG8AbAB1AG0AbgAg
AGkAbgBzAHQAZQBhAGQALgAAD0kAbgBwAHUAdAAgADAAAHFTAEMAXwBmADYAZQBkAGUAYwA4AGMA
MgA2AGYAMQA0ADgAZABmAGIANAA2ADIANgA5ADAAOAAwADMANQBjADAANAA2ADEALgBQAHIAbwBw
AGUAcgB0AGkAZQBzAC4AUgBlAHMAbwB1AHIAYwBlAHMAAL/iYlh/AfdOgVJP1GZRFe4ABCABAQgD
IAABBSABARERBCABAQ4FIAEBEVkDBwEICSADARI9HQgSQQUgAgEIHAMgAAIGIAICDhF1BSABHQgI
BgABEnkRfQUgABKAgQcgAgEOEoCBCLd6XFYZNOCJCImEXc2AgMyRAgYIAwYSFAMGEhgDBhJFAwYS
UQMGElUDBhIgBSABARIMBCABAQIJIAQBCA4SPRJBBSABARJFBAAAElEEAAASVQUAAQESVQQAABIg
AwAAAQMoAAgDKAACBAgAElEECAASVQQIABIgCAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0
aW9uVGhyb3dzAQgBAAIAAAAAACgBACNTQ19mNmVkZWM4YzI2ZjE0OGRmYjQ2MjY5MDgwMzVjMDQ2
MQAABQEAAAAAFgEAEUNvcHlyaWdodCBAICAyMDIxAABJAQAaLk5FVEZyYW1ld29yayxWZXJzaW9u
PXY0LjcBAFQOFEZyYW1ld29ya0Rpc3BsYXlOYW1lEi5ORVQgRnJhbWV3b3JrIDQuNwQBAAAAALQA
AADOyu++AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5SZXNvdXJjZVJlYWRlciwgbXNjb3JsaWIs
IFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1
NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVudGltZVJlc291cmNlU2V0AgAAAAAAAAAAAAAA
UEFEUEFEULQAAAAgMQAAAAAAAAAAAAA6MQAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALDEAAAAA
AAAAAAAAAABfQ29yRGxsTWFpbgBtc2NvcmVlLmRsbAAAAAAA/yUAIAAQAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAEAEAAAABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAA
AEgAAABYQAAA7AMAAAAAAAAAAAAA7AM0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8A
AAAAAL0E7/4AAAEAAAABAAAAAAAAAAEAAAAAAD8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABE
AAAAAQBWAGEAcgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8A
bgAAAAAAAACwBEwDAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAACgDAAABADAAMAAw
ADAAMAA0AGIAMAAAABoAAQABAEMAbwBtAG0AZQBuAHQAcwAAAAAAAAAiAAEAAQBDAG8AbQBwAGEA
bgB5AE4AYQBtAGUAAAAAAAAAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAA
AAAAUwBDAF8AZgA2AGUAZABlAGMAOABjADIANgBmADEANAA4AGQAZgBiADQANgAyADYAOQAwADgA
MAAzADUAYwAwADQANgAxAAAAMAAIAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAu
ADAALgAwAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAEMAXwBmADYAZQBkAGUA
YwA4AGMAMgA2AGYAMQA0ADgAZABmAGIANAA2ADIANgA5ADAAOAAwADMANQBjADAANAA2ADEALgBk
AGwAbAAAAEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkAcgBpAGcA
aAB0ACAAQAAgACAAMgAwADIAMQAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBkAGUAbQBhAHIAawBz
AAAAAAAAAAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAFMAQwBfAGYA
NgBlAGQAZQBjADgAYwAyADYAZgAxADQAOABkAGYAYgA0ADYAMgA2ADkAMAA4ADAAMwA1AGMAMAA0
ADYAMQAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAEMAXwBmADYA
ZQBkAGUAYwA4AGMAMgA2AGYAMQA0ADgAZABmAGIANAA2ADIANgA5ADAAOAAwADMANQBjADAANAA2
ADEAAAA0AAgAAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADAALgAwAAAA
OAAIAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4AMAAuADAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAADAAAAEwxAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==]]></arrayElement>
                  </arrayElements>
                </property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package."
                  name="VSTAProjectName"
                  typeConverter="NOTBROWSABLE">SC_f6edec8c26f148dfb4626908035c0461</property>
                <property
                  dataType="System.String"
                  description="Specifies the programming language used by the script."
                  name="ScriptLanguage"
                  typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages">CSharp</property>
                <property
                  dataType="System.String"
                  description="Specifies a comma-separated list of read-only variables."
                  name="ReadOnlyVariables"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIVariablePickerDlg"></property>
                <property
                  dataType="System.String"
                  description="Specifies a comma-separated list of read/write variables."
                  name="ReadWriteVariables"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIWriteableVariablePickerDlg"></property>
                <property
                  dataType="System.String"
                  description="List of breakpoints present on the script."
                  isArray="true"
                  name="BreakpointCollection"
                  typeConverter="NOTBROWSABLE">
                  <arrayElements
                    arrayElementCount="0" />
                </property>
                <property
                  dataType="System.String"
                  description="Checksum to match component metedata against compiled codes."
                  name="MetadataChecksum140"
                  typeConverter="NOTBROWSABLE">CA</property>
                <property
                  dataType="System.String"
                  name="UserComponentTypeName">Microsoft.ScriptComponentHost</property>
              </properties>
              <inputs>
                <input
                  refId="Package\Extract fee data\Generate source row number.Inputs[Input 0]"
                  hasSideEffects="true"
                  name="Input 0">
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Extract fee data\Generate source row number.Outputs[Output 0]"
                  name="Output 0"
                  synchronousInputId="Package\Extract fee data\Generate source row number.Inputs[Input 0]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Extract fee data\Generate source row number.Outputs[Output 0].Columns[SourceRowNumber]"
                      dataType="i4"
                      lineageId="Package\Extract fee data\Generate source row number.Outputs[Output 0].Columns[SourceRowNumber]"
                      name="SourceRowNumber" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Extract fee data\Insert raw fee data to database"
              componentClassID="Microsoft.OLEDBDestination"
              contactInfo="OLE DB Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
              description="OLE DB Destination"
              name="Insert raw fee data to database"
              usesDispositions="true"
              version="4">
              <properties>
                <property
                  dataType="System.Int32"
                  description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                  name="CommandTimeout">0</property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the database object used to open a rowset."
                  name="OpenRowset">[DWSTAGE].[FeeExtract]</property>
                <property
                  dataType="System.String"
                  description="Specifies the variable that contains the name of the database object used to open a rowset."
                  name="OpenRowsetVariable"></property>
                <property
                  dataType="System.String"
                  description="The SQL command to be executed."
                  name="SqlCommand"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                <property
                  dataType="System.Int32"
                  description="Specifies the column code page to use when code page information is unavailable from the data source."
                  name="DefaultCodePage">1252</property>
                <property
                  dataType="System.Boolean"
                  description="Forces the use of the DefaultCodePage property value when describing character data."
                  name="AlwaysUseDefaultCodePage">false</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the mode used to access the database."
                  name="AccessMode"
                  typeConverter="AccessMode">3</property>
                <property
                  dataType="System.Boolean"
                  description="Indicates whether the values supplied for identity columns will be copied to the destination. If false, values for identity columns will be auto-generated at the destination. Applies only if fast load is turned on."
                  name="FastLoadKeepIdentity">false</property>
                <property
                  dataType="System.Boolean"
                  description="Indicates whether the columns containing null will have null inserted in the destination. If false, columns containing null will have their default values inserted at the destination. Applies only if fast load is turned on."
                  name="FastLoadKeepNulls">false</property>
                <property
                  dataType="System.String"
                  description="Specifies options to be used with fast load.  Applies only if fast load is turned on."
                  name="FastLoadOptions">TABLOCK,CHECK_CONSTRAINTS</property>
                <property
                  dataType="System.Int32"
                  description="Specifies when commits are issued during data insertion.  A value of 0 specifies that one commit will be issued at the end of data insertion.  Applies only if fast load is turned on."
                  name="FastLoadMaxInsertCommitSize">2147483647</property>
              </properties>
              <connections>
                <connection
                  refId="Package\Extract fee data\Insert raw fee data to database.Connections[OleDbConnection]"
                  connectionManagerID="Package.ConnectionManagers[LocalHost.Miniproject 1]"
                  connectionManagerRefId="Package.ConnectionManagers[LocalHost.Miniproject 1]"
                  description="The OLE DB runtime connection used to access the database."
                  name="OleDbConnection" />
              </connections>
              <inputs>
                <input
                  refId="Package\Extract fee data\Insert raw fee data to database.Inputs[OLE DB Destination Input]"
                  errorOrTruncationOperation="Insert"
                  errorRowDisposition="FailComponent"
                  hasSideEffects="true"
                  name="OLE DB Destination Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Extract fee data\Insert raw fee data to database.Inputs[OLE DB Destination Input].Columns[RecordType]"
                      cachedDataType="wstr"
                      cachedLength="50"
                      cachedName="RecordType"
                      externalMetadataColumnId="Package\Extract fee data\Insert raw fee data to database.Inputs[OLE DB Destination Input].ExternalColumns[RecordType]"
                      lineageId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].Columns[RecordType]" />
                    <inputColumn
                      refId="Package\Extract fee data\Insert raw fee data to database.Inputs[OLE DB Destination Input].Columns[BusinessName]"
                      cachedDataType="wstr"
                      cachedLength="300"
                      cachedName="BusinessName"
                      externalMetadataColumnId="Package\Extract fee data\Insert raw fee data to database.Inputs[OLE DB Destination Input].ExternalColumns[BusinessName]"
                      lineageId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].Columns[BusinessName]" />
                    <inputColumn
                      refId="Package\Extract fee data\Insert raw fee data to database.Inputs[OLE DB Destination Input].Columns[BusinessName2]"
                      cachedDataType="wstr"
                      cachedLength="100"
                      cachedName="BusinessName2"
                      externalMetadataColumnId="Package\Extract fee data\Insert raw fee data to database.Inputs[OLE DB Destination Input].ExternalColumns[BusinessName2]"
                      lineageId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].Columns[BusinessName2]" />
                    <inputColumn
                      refId="Package\Extract fee data\Insert raw fee data to database.Inputs[OLE DB Destination Input].Columns[Industry]"
                      cachedDataType="wstr"
                      cachedLength="50"
                      cachedName="Industry"
                      externalMetadataColumnId="Package\Extract fee data\Insert raw fee data to database.Inputs[OLE DB Destination Input].ExternalColumns[Industry]"
                      lineageId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].Columns[Industry]" />
                    <inputColumn
                      refId="Package\Extract fee data\Insert raw fee data to database.Inputs[OLE DB Destination Input].Columns[FeeType]"
                      cachedDataType="wstr"
                      cachedLength="50"
                      cachedName="FeeType"
                      externalMetadataColumnId="Package\Extract fee data\Insert raw fee data to database.Inputs[OLE DB Destination Input].ExternalColumns[FeeType]"
                      lineageId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].Columns[FeeType]" />
                    <inputColumn
                      refId="Package\Extract fee data\Insert raw fee data to database.Inputs[OLE DB Destination Input].Columns[FeeAmount]"
                      cachedDataType="wstr"
                      cachedLength="50"
                      cachedName="FeeAmount"
                      externalMetadataColumnId="Package\Extract fee data\Insert raw fee data to database.Inputs[OLE DB Destination Input].ExternalColumns[FeeAmount]"
                      lineageId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].Columns[FeeAmount]" />
                    <inputColumn
                      refId="Package\Extract fee data\Insert raw fee data to database.Inputs[OLE DB Destination Input].Columns[FeeDate]"
                      cachedDataType="wstr"
                      cachedLength="50"
                      cachedName="FeeDate"
                      externalMetadataColumnId="Package\Extract fee data\Insert raw fee data to database.Inputs[OLE DB Destination Input].ExternalColumns[FeeDate]"
                      lineageId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].Columns[FeeDate]" />
                    <inputColumn
                      refId="Package\Extract fee data\Insert raw fee data to database.Inputs[OLE DB Destination Input].Columns[RecordId]"
                      cachedDataType="wstr"
                      cachedLength="50"
                      cachedName="RecordId"
                      externalMetadataColumnId="Package\Extract fee data\Insert raw fee data to database.Inputs[OLE DB Destination Input].ExternalColumns[RecordId]"
                      lineageId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].Columns[RecordId]" />
                    <inputColumn
                      refId="Package\Extract fee data\Insert raw fee data to database.Inputs[OLE DB Destination Input].Columns[FeeDescription]"
                      cachedDataType="wstr"
                      cachedLength="100"
                      cachedName="FeeDescription"
                      externalMetadataColumnId="Package\Extract fee data\Insert raw fee data to database.Inputs[OLE DB Destination Input].ExternalColumns[FeeDescription]"
                      lineageId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].Columns[FeeDescription]" />
                    <inputColumn
                      refId="Package\Extract fee data\Insert raw fee data to database.Inputs[OLE DB Destination Input].Columns[FeeStatus]"
                      cachedDataType="wstr"
                      cachedLength="50"
                      cachedName="FeeStatus"
                      externalMetadataColumnId="Package\Extract fee data\Insert raw fee data to database.Inputs[OLE DB Destination Input].ExternalColumns[FeeStatus]"
                      lineageId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].Columns[FeeStatus]" />
                    <inputColumn
                      refId="Package\Extract fee data\Insert raw fee data to database.Inputs[OLE DB Destination Input].Columns[FeeSequenceId]"
                      cachedDataType="wstr"
                      cachedLength="50"
                      cachedName="FeeSequenceId"
                      externalMetadataColumnId="Package\Extract fee data\Insert raw fee data to database.Inputs[OLE DB Destination Input].ExternalColumns[FeeSequenceId]"
                      lineageId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output].Columns[FeeSequenceId]" />
                    <inputColumn
                      refId="Package\Extract fee data\Insert raw fee data to database.Inputs[OLE DB Destination Input].Columns[SourceRowNumber]"
                      cachedDataType="i4"
                      cachedName="SourceRowNumber"
                      externalMetadataColumnId="Package\Extract fee data\Insert raw fee data to database.Inputs[OLE DB Destination Input].ExternalColumns[SourceRowNumber]"
                      lineageId="Package\Extract fee data\Generate source row number.Outputs[Output 0].Columns[SourceRowNumber]" />
                  </inputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Extract fee data\Insert raw fee data to database.Inputs[OLE DB Destination Input].ExternalColumns[RecordType]"
                      dataType="wstr"
                      length="50"
                      name="RecordType" />
                    <externalMetadataColumn
                      refId="Package\Extract fee data\Insert raw fee data to database.Inputs[OLE DB Destination Input].ExternalColumns[BusinessName]"
                      dataType="wstr"
                      length="300"
                      name="BusinessName" />
                    <externalMetadataColumn
                      refId="Package\Extract fee data\Insert raw fee data to database.Inputs[OLE DB Destination Input].ExternalColumns[BusinessName2]"
                      dataType="wstr"
                      length="100"
                      name="BusinessName2" />
                    <externalMetadataColumn
                      refId="Package\Extract fee data\Insert raw fee data to database.Inputs[OLE DB Destination Input].ExternalColumns[Industry]"
                      dataType="wstr"
                      length="50"
                      name="Industry" />
                    <externalMetadataColumn
                      refId="Package\Extract fee data\Insert raw fee data to database.Inputs[OLE DB Destination Input].ExternalColumns[FeeType]"
                      dataType="wstr"
                      length="50"
                      name="FeeType" />
                    <externalMetadataColumn
                      refId="Package\Extract fee data\Insert raw fee data to database.Inputs[OLE DB Destination Input].ExternalColumns[FeeAmount]"
                      dataType="wstr"
                      length="50"
                      name="FeeAmount" />
                    <externalMetadataColumn
                      refId="Package\Extract fee data\Insert raw fee data to database.Inputs[OLE DB Destination Input].ExternalColumns[FeeDate]"
                      dataType="wstr"
                      length="50"
                      name="FeeDate" />
                    <externalMetadataColumn
                      refId="Package\Extract fee data\Insert raw fee data to database.Inputs[OLE DB Destination Input].ExternalColumns[RecordId]"
                      dataType="wstr"
                      length="50"
                      name="RecordId" />
                    <externalMetadataColumn
                      refId="Package\Extract fee data\Insert raw fee data to database.Inputs[OLE DB Destination Input].ExternalColumns[FeeDescription]"
                      dataType="wstr"
                      length="100"
                      name="FeeDescription" />
                    <externalMetadataColumn
                      refId="Package\Extract fee data\Insert raw fee data to database.Inputs[OLE DB Destination Input].ExternalColumns[FeeStatus]"
                      dataType="wstr"
                      length="50"
                      name="FeeStatus" />
                    <externalMetadataColumn
                      refId="Package\Extract fee data\Insert raw fee data to database.Inputs[OLE DB Destination Input].ExternalColumns[FeeSequenceId]"
                      dataType="wstr"
                      length="50"
                      name="FeeSequenceId" />
                    <externalMetadataColumn
                      refId="Package\Extract fee data\Insert raw fee data to database.Inputs[OLE DB Destination Input].ExternalColumns[SourceRowNumber]"
                      dataType="i4"
                      name="SourceRowNumber" />
                  </externalMetadataColumns>
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Extract fee data\Insert raw fee data to database.Outputs[OLE DB Destination Error Output]"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="OLE DB Destination Error Output"
                  synchronousInputId="Package\Extract fee data\Insert raw fee data to database.Inputs[OLE DB Destination Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Extract fee data\Insert raw fee data to database.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Extract fee data\Insert raw fee data to database.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Extract fee data\Insert raw fee data to database.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Extract fee data\Insert raw fee data to database.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Extract fee data\Redirect errors"
              componentClassID="Microsoft.FlatFileDestination"
              contactInfo="Flat File Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
              description="Flat File Destination"
              localeId="2057"
              name="Redirect errors"
              version="1">
              <properties>
                <property
                  dataType="System.Boolean"
                  description="Specifies whether the data will overwrite or append to the destination file."
                  name="Overwrite">true</property>
                <property
                  dataType="System.Null"
                  description="Specifies the text to write to the destination file before any data is written."
                  expressionType="Notify"
                  name="Header" />
                <property
                  dataType="System.Boolean"
                  description="When text qualifier is enabled, specifies whether the text qualifier in the data written to the destination file will be escaped or not."
                  name="EscapeQualifier">false</property>
              </properties>
              <connections>
                <connection
                  refId="Package\Extract fee data\Redirect errors.Connections[FlatFileConnection]"
                  connectionManagerID="Package.ConnectionManagers[Fees - errors]"
                  connectionManagerRefId="Package.ConnectionManagers[Fees - errors]"
                  name="FlatFileConnection" />
              </connections>
              <inputs>
                <input
                  refId="Package\Extract fee data\Redirect errors.Inputs[Flat File Destination Input]"
                  hasSideEffects="true"
                  name="Flat File Destination Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Extract fee data\Redirect errors.Inputs[Flat File Destination Input].Columns[Flat File Source Error Output Column]"
                      cachedCodepage="65001"
                      cachedDataType="text"
                      cachedName="Flat File Source Error Output Column"
                      externalMetadataColumnId="Package\Extract fee data\Redirect errors.Inputs[Flat File Destination Input].ExternalColumns[Flat File Source Error Output Column]"
                      lineageId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Error Output].Columns[Flat File Source Error Output Column]" />
                    <inputColumn
                      refId="Package\Extract fee data\Redirect errors.Inputs[Flat File Destination Input].Columns[ErrorCode]"
                      cachedDataType="i4"
                      cachedName="ErrorCode"
                      externalMetadataColumnId="Package\Extract fee data\Redirect errors.Inputs[Flat File Destination Input].ExternalColumns[ErrorCode]"
                      lineageId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Error Output].Columns[ErrorCode]" />
                    <inputColumn
                      refId="Package\Extract fee data\Redirect errors.Inputs[Flat File Destination Input].Columns[ErrorColumn]"
                      cachedDataType="i4"
                      cachedName="ErrorColumn"
                      externalMetadataColumnId="Package\Extract fee data\Redirect errors.Inputs[Flat File Destination Input].ExternalColumns[ErrorColumn]"
                      lineageId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Error Output].Columns[ErrorColumn]" />
                  </inputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Extract fee data\Redirect errors.Inputs[Flat File Destination Input].ExternalColumns[Flat File Source Error Output Column]"
                      codePage="65001"
                      dataType="text"
                      name="Flat File Source Error Output Column" />
                    <externalMetadataColumn
                      refId="Package\Extract fee data\Redirect errors.Inputs[Flat File Destination Input].ExternalColumns[ErrorCode]"
                      dataType="i4"
                      name="ErrorCode" />
                    <externalMetadataColumn
                      refId="Package\Extract fee data\Redirect errors.Inputs[Flat File Destination Input].ExternalColumns[ErrorColumn]"
                      dataType="i4"
                      name="ErrorColumn" />
                  </externalMetadataColumns>
                </input>
              </inputs>
            </component>
          </components>
          <paths>
            <path
              refId="Package\Extract fee data.Paths[Flat File Source Error Output]"
              endId="Package\Extract fee data\Redirect errors.Inputs[Flat File Destination Input]"
              name="Flat File Source Error Output"
              startId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Error Output]" />
            <path
              refId="Package\Extract fee data.Paths[Flat File Source Output]"
              endId="Package\Extract fee data\Generate source row number.Inputs[Input 0]"
              name="Flat File Source Output"
              startId="Package\Extract fee data\Extract fee data from dataset.Outputs[Flat File Source Output]" />
            <path
              refId="Package\Extract fee data.Paths[Output 0]"
              endId="Package\Extract fee data\Insert raw fee data to database.Inputs[OLE DB Destination Input]"
              name="Output 0"
              startId="Package\Extract fee data\Generate source row number.Outputs[Output 0]" />
          </paths>
        </pipeline>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Extract license data"
      DTS:CreationName="Microsoft.Pipeline"
      DTS:Description="Data Flow Task"
      DTS:DTSID="{9240c34d-6008-446b-ad73-7d2d87aab6ae}"
      DTS:ExecutableType="Microsoft.Pipeline"
      DTS:LocaleID="-1"
      DTS:ObjectName="Extract license data"
      DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
      <DTS:Variables />
      <DTS:ObjectData>
        <pipeline
          version="1">
          <components>
            <component
              refId="Package\Extract license data\Generate source row number"
              componentClassID="Microsoft.ManagedComponentHost"
              contactInfo="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum.;Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;12"
              description="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum."
              name="Generate source row number"
              version="12">
              <properties>
                <property
                  dataType="System.String"
                  description="Stores the source code of the component"
                  isArray="true"
                  name="SourceCode"
                  state="cdata">
                  <arrayElements
                    arrayElementCount="30">
                    <arrayElement
                      dataType="System.String"><![CDATA[ComponentWrapper.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public override void ProcessInput(int InputID, string InputName, PipelineBuffer Buffer, OutputNameMap OutputMap)
    {

        if (InputName.Equals(@"Input 0", StringComparison.Ordinal))
        {
            Input0_ProcessInput(new Input0Buffer(Buffer, GetColumnIndexes(InputID), OutputMap));
        }

    }

    public virtual void Input0_ProcessInput(Input0Buffer Buffer)
    {
        while (Buffer.NextRow())
        {
            Input0_ProcessInputRow(Buffer);
        }
    }

    public virtual void Input0_ProcessInputRow(Input0Buffer Row)
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Resources.resx]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[main.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[#region Help:  Introduction to the Script Component
/* The Script Component allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services data flow.
 *
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script component. */
#endregion

#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
#endregion

/// <summary>
/// This is the class to which to add your code.  Do not change the name, attributes, or parent
/// of this class.
/// </summary>
[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{
    #region Help:  Using Integration Services variables and parameters
    /* To use a variable in this script, first ensure that the variable has been added to
     * either the list contained in the ReadOnlyVariables property or the list contained in
     * the ReadWriteVariables property of this script component, according to whether or not your
     * code needs to write into the variable.  To do so, save this script, close this instance of
     * Visual Studio, and update the ReadOnlyVariables and ReadWriteVariables properties in the
     * Script Transformation Editor window.
     * To use a parameter in this script, follow the same steps. Parameters are always read-only.
     *
     * Example of reading from a variable or parameter:
     *  DateTime startTime = Variables.MyStartTime;
     *
     * Example of writing to a variable:
     *  Variables.myStringVariable = "new value";
     */
    #endregion

    #region Help:  Using Integration Services Connnection Managers
    /* Some types of connection managers can be used in this script component.  See the help topic
     * "Working with Connection Managers Programatically" for details.
     *
     * To use a connection manager in this script, first ensure that the connection manager has
     * been added to either the list of connection managers on the Connection Managers page of the
     * script component editor.  To add the connection manager, save this script, close this instance of
     * Visual Studio, and add the Connection Manager to the list.
     *
     * If the component needs to hold a connection open while processing rows, override the
     * AcquireConnections and ReleaseConnections methods.
     * 
     * Example of using an ADO.Net connection manager to acquire a SqlConnection:
     *  object rawConnection = Connections.SalesDB.AcquireConnection(transaction);
     *  SqlConnection salesDBConn = (SqlConnection)rawConnection;
     *
     * Example of using a File connection manager to acquire a file path:
     *  object rawConnection = Connections.Prices_zip.AcquireConnection(transaction);
     *  string filePath = (string)rawConnection;
     *
     * Example of releasing a connection manager:
     *  Connections.SalesDB.ReleaseConnection(rawConnection);
     */
    #endregion

    #region Help:  Firing Integration Services Events
    /* This script component can fire events.
     *
     * Example of firing an error event:
     *  ComponentMetaData.FireError(10, "Process Values", "Bad value", "", 0, out cancel);
     *
     * Example of firing an information event:
     *  ComponentMetaData.FireInformation(10, "Process Values", "Processing has started", "", 0, fireAgain);
     *
     * Example of firing a warning event:
     *  ComponentMetaData.FireWarning(10, "Process Values", "No rows were received", "", 0);
     */
    #endregion

    private int _sourceRowNumber;

    /// <summary>
    /// This method is called once, before rows begin to be processed in the data flow.
    ///
    /// You can remove this method if you don't need to do anything here.
    /// </summary>
    public override void PreExecute()
    {
        base.PreExecute();
        _sourceRowNumber = 1;
    }

    /// <summary>
    /// This method is called after all the rows have passed through this component.
    ///
    /// You can delete this method if you don't need to do anything here.
    /// </summary>
    public override void PostExecute()
    {
        base.PostExecute();
        /*
         * Add your code here
         */
    }

    /// <summary>
    /// This method is called once for every row that passes through the component from Input0.
    ///
    /// Example of reading a value from a column in the the row:
    ///  string zipCode = Row.ZipCode
    ///
    /// Example of writing a value to a column in the row:
    ///  Row.ZipCode = zipCode
    /// </summary>
    /// <param name="Row">The row that is currently passing through the component</param>
    public override void Input0_ProcessInputRow(Input0Buffer Row)
    {
        Row.SourceRowNumber = _sourceRowNumber++;
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[BufferWrapper.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class Input0Buffer: ScriptBuffer

{
    public Input0Buffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public Int32 SourceRowNumber
    {
        set
        {
            this[0] = value;
        }
    }
    public bool SourceRowNumber_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public bool NextRow()
    {
        return base.NextRow();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Settings.Designer.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_71dd553d594c4f57a9f634a3abeff42e.Properties.Settings.get_Default():SC_71dd553d594c4f57a9f634a3abeff42e.Properties.Sett" +
    "ings")]

namespace SC_71dd553d594c4f57a9f634a3abeff42e.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[SC_71dd553d594c4f57a9f634a3abeff42e.csproj]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{4deba537-dfde-462a-a943-2cdf806250f7}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>SC_71dd553d594c4f57a9f634a3abeff42e</RootNamespace>
    <AssemblyName>SC_71dd553d594c4f57a9f634a3abeff42e</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.TxScript, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Compile Include="main.cs" />
    <Compile Include="BufferWrapper.cs" />
    <Compile Include="ComponentWrapper.cs" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="ScriptComponent" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="" DebugInfoCommandLine="" DebugInfoWorkingDir="" IconImageList="" />
        <Host Name="ScriptComponent" GeneratedNamespace="SC_71dd553d594c4f57a9f634a3abeff42e" IconIndex="0"></Host>
        <ProjectClient>
          <HostIdentifier>SSIS_SC150</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Project]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF16LE]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:Language>msBuild</msb:Language>
    <msb:CodeName>SC_71dd553d594c4f57a9f634a3abeff42e</msb:CodeName>
    <msb:DisplayName>SC_71dd553d594c4f57a9f634a3abeff42e</msb:DisplayName>
    <msb:ProjectId>{090FCAE4-D765-4352-874E-0C225A8AD6E5}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="SC_71dd553d594c4f57a9f634a3abeff42e.csproj" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="main.cs" />
    <msb:File Include="BufferWrapper.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ComponentWrapper.cs" />
  </msb:ItemGroup>
</c:Project>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\AssemblyInfo.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_71dd553d594c4f57a9f634a3abeff42e")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("SC_71dd553d594c4f57a9f634a3abeff42e")]
[assembly: AssemblyCopyright("Copyright @  2021")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.0.0")]
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Settings.settings]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Resources.Designer.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_71dd553d594c4f57a9f634a3abeff42e.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_71dd553d594c4f57a9f634a3abeff42e.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_71dd553d594c4f57a9f634a3abeff42e.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace SC_71dd553d594c4f57a9f634a3abeff42e.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_71dd553d594c4f57a9f634a3abeff42e.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement>
                  </arrayElements>
                </property>
                <property
                  dataType="System.String"
                  description="Stores the binary representation of the component"
                  isArray="true"
                  name="BinaryCode"
                  state="cdata">
                  <arrayElements
                    arrayElementCount="2">
                    <arrayElement
                      dataType="System.String"><![CDATA[SC_71dd553d594c4f57a9f634a3abeff42e.dll]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAOnJtGAAAAAAAAAAAOAAIiALATAAABIAAAAIAAAAAAAASjEA
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAPgwAABPAAAAAEAAAEgEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAUBEAAAAgAAAAEgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAEgEAAAAQAAAAAYAAAAUAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAGgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAAAs
MQAAAAAAAEgAAAACAAUArCEAAJQOAAABAAAAAAAAAEAwAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAADoCKBAAAAoCF30BAAAEKh4CKBEAAAoqABMwBAAYAAAAAQAA
EQMCAnsBAAAECgYXWH0BAAAEBm8GAAAGKh4CKAoAAAYqKgIDBAUoEgAACio6AhYDjBoAAAEoEwAA
CipaAywIAhYoFAAACipyAQAAcHMVAAAKeh4CKBYAAAoqHgIoFwAACip+AigYAAAKAgJzDgAABn0C
AAAEAgJzDwAABn0DAAAEKpIEcp4AAHAabxkAAAosFQIFAgMoGgAACg4EcwUAAAZvDAAABipKKwcC
A28NAAAGA28IAAAGLfEqBio6AigbAAAKAgN9BAAABCo6AigbAAAKAgN9BQAABCoeAigbAAAKKq5+
BgAABC0ecq4AAHDQBwAAAigcAAAKbx0AAApzHgAACoAGAAAEfgYAAAQqGn4HAAAEKh4CgAcAAAQq
Gn4IAAAEKh4CKB8AAAoqLnMVAAAGgAgAAAQqAEJTSkIBAAEAAAAAAAwAAAB2NC4wLjMwMzE5AAAA
AAUAbAAAACwFAAAjfgAAmAUAADgGAAAjU3RyaW5ncwAAAADQCwAAIAEAACNVUwDwDAAAEAAAACNH
VUlEAAAAAA0AAJQBAAAjQmxvYgAAAAAAAAACAAABVxWiAQkBAAAA+gEzABYAAAEAAAAgAAAACAAA
AAgAAAAWAAAADwAAAB8AAAAQAAAAAQAAAAMAAAAFAAAABgAAAAEAAAAEAAAAAQAAAAAA8AIBAAAA
AAAGAOoBbwQGAH4CbwQGADYBXAQPAOMEAAAGAGMBjAMGAM0BjAMGAK4BjAMGAGUCjAMGAAoCjAMG
ACMCjAMGAHoBjAMGAJUBuQIKAD4CgwAKAC4EgwAOAB8EgwAKANUDgwAKAKkFgwAGAGwFRAMGABkB
XAQGAD8EjwQGAMkDdwMSAOkA2gISAEoB2gISANEAYgMGAP4AbwQGAAEARAMGAJ4DRAMGANMCRAMG
ALgDRAMGAKQARAMGAFUARAMGAC4GjAMAAAAABwAAAAAAAQABAAEAEABXAwAAEAABAAEAAQAQABIE
AAA5AAIABQABABAAiwUAAEUAAgAKAAEAEABgBQAASQAEAA4AAQAQACEFAABJAAUADwAAABAAlgTy
BEkABgAQAAABEABQBfIEYQAIABQAAQABBGcABgBgBWoABgAhBW4AAQCZBXIAAQCZBXIAEQBLA3YA
EQDBAHoAEQBFAH4AUCAAAAAAxgCcAgYAAQBfIAAAAADGAKcCBgABAGggAAAAAMYACwaCAAEAjCAA
AAAAhhhPBAYAAgCUIAAAAACGGE8EHwACAJ8gAAAAAIYI7QMBAAUAriAAAAAAhggYA4gABgDFIAAA
AACGACIGLwAHAM0gAAAAAIYAcwUvAAcA1SAAAAAAhhhPBAYABwD1IAAAAADGAP4FjQAHABohAAAA
AMYB9wWCAAsALSEAAAAAxgELBoIADAAvIQAAAACGGE8ElwANAD4hAAAAAIYYTwSXAA4ATSEAAAAA
gxhPBAYADwBVIQAAAACTCDsEnQAPAIEhAAAAAJMIqQCiAA8AiCEAAAAAkwi1AKcADwCQIQAAAACW
CH8FrQAQAJchAAAAAIYYTwQGABAAnyEAAAAAkRhVBLIAEAAAAAEAJgYAAAEANAQAAAIAKwUAAAMA
4wMAAAEAswIAAAEAswIAAAEAEAAAAAIAeQAAAAMANAQAAAQA4wMAAAEANAQAAAEAJgYAAAEArwUA
AAEArwUAAAEAswIJAE8EAQARAE8EBgAZAE8ECgApAE8EEAAxAE8EEAA5AE8EEABBAE8EEABJAE8E
EABRAE8EEABZAE8EEABhAE8EEABpAE8EBgCZAE8EBgC5AE8EFQDJAE8EBgCJAJwCBgCJAKcCBgBx
AE8EHwBxADsDKQBxADMDAQDZAE8EEABxACIGLwBxAHMFLwCJAE8EBgDhAFkFMwCJAD8FOgCRAE8E
BgDxAGcAQADxACoGRwChAE8ETQDBAE8EBgAuAAsAzQAuABMA1gAuABsA9QAuACMA/gAuACsAJwEu
ADMAJwEuADsAJwEuAEMA/gAuAEsALQEuAFMAJwEuAFsARAFDAGMAjgFpAHMA9QCJAHMA9QDjAGsA
jgEBAXsAjgEbAAMAAQAHAAMACAAFAAAA8QO2AAAAHAO6AAAAPwS+AAAAyQDDAAAAgwXIAAEABgAD
AAEABwAFAAIAEQAHAAIAEgAJAAEAEwAJAAIAFAALAASAAAABAAAAAAAAAAAAAAAAACEAAAAEAAAA
AAAAAAAAAABVABgAAAAAAA8AAAAAAAAAAAAAAF4AuQUAAAAADwAAAAAAAAAAAAAAXgDWBQAAAAAE
AAAAAAAAAAAAAABVAEQDAAAAAAAAAAABAAAAoAQAAAAAAAAASW50MzIAPE1vZHVsZT4ASW5wdXRJ
RABtc2NvcmxpYgBTQ183MWRkNTUzZDU5NGM0ZjU3YTlmNjM0YTNhYmVmZjQyZQBkZWZhdWx0SW5z
dGFuY2UAUnVudGltZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUASW5wdXROYW1lAE1pY3Jv
c29mdC5TcWxTZXJ2ZXIuRHRzLlBpcGVsaW5lAFR5cGUAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUA
cmVzb3VyY2VDdWx0dXJlAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAEVkaXRvckJyb3dzYWJsZVN0
YXRlAENvbXBpbGVyR2VuZXJhdGVkQXR0cmlidXRlAERlYnVnZ2VyTm9uVXNlckNvZGVBdHRyaWJ1
dGUARGVidWdnYWJsZUF0dHJpYnV0ZQBFZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUAQXNzZW1ibHlU
aXRsZUF0dHJpYnV0ZQBBc3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBUYXJnZXRGcmFtZXdvcmtB
dHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRp
b25BdHRyaWJ1dGUAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBBc3NlbWJseVByb2R1
Y3RBdHRyaWJ1dGUAQXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAU1NJU1NjcmlwdENvbXBvbmVu
dEVudHJ5UG9pbnRBdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRlAFJ1bnRpbWVDb21w
YXRpYmlsaXR5QXR0cmlidXRlAFByZUV4ZWN1dGUAUG9zdEV4ZWN1dGUAdmFsdWUAU3lzdGVtLlJ1
bnRpbWUuVmVyc2lvbmluZwBTdHJpbmcAU3lzdGVtLkNvbXBvbmVudE1vZGVsAFNDXzcxZGQ1NTNk
NTk0YzRmNTdhOWY2MzRhM2FiZWZmNDJlLmRsbABzZXRfU291cmNlUm93TnVtYmVyX0lzTnVsbABT
ZXROdWxsAHNldF9JdGVtAFN5c3RlbQByZXNvdXJjZU1hbgBTY3JpcHRNYWluAFN5c3RlbS5Db25m
aWd1cmF0aW9uAFN5c3RlbS5HbG9iYWxpemF0aW9uAFN5c3RlbS5SZWZsZWN0aW9uAEludmFsaWRP
cGVyYXRpb25FeGNlcHRpb24AU3RyaW5nQ29tcGFyaXNvbgBDdWx0dXJlSW5mbwBPdXRwdXROYW1l
TWFwAE91dHB1dE1hcABzZXRfU291cmNlUm93TnVtYmVyAF9zb3VyY2VSb3dOdW1iZXIASW5wdXQw
QnVmZmVyAFBpcGVsaW5lQnVmZmVyAFNjcmlwdEJ1ZmZlcgBnZXRfUmVzb3VyY2VNYW5hZ2VyAC5j
dG9yAC5jY3RvcgBTeXN0ZW0uRGlhZ25vc3RpY3MAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2
aWNlcwBTeXN0ZW0uUmVzb3VyY2VzAFNDXzcxZGQ1NTNkNTk0YzRmNTdhOWY2MzRhM2FiZWZmNDJl
LlByb3BlcnRpZXMuUmVzb3VyY2VzLnJlc291cmNlcwBEZWJ1Z2dpbmdNb2RlcwBTQ183MWRkNTUz
ZDU5NGM0ZjU3YTlmNjM0YTNhYmVmZjQyZS5Qcm9wZXJ0aWVzAFZhcmlhYmxlcwBCdWZmZXJDb2x1
bW5JbmRleGVzAEdldENvbHVtbkluZGV4ZXMAU2V0dGluZ3MARXF1YWxzAENvbm5lY3Rpb25zAE9i
amVjdABFbmRPZlJvd3NldABnZXRfRGVmYXVsdABVc2VyQ29tcG9uZW50AFBhcmVudENvbXBvbmVu
dABTY3JpcHRDb21wb25lbnQATWljcm9zb2Z0LlNxbFNlcnZlci5UeFNjcmlwdABNaWNyb3NvZnQu
U3FsU2VydmVyLlBpcGVsaW5lSG9zdABJbnB1dDBfUHJvY2Vzc0lucHV0AElucHV0MF9Qcm9jZXNz
SW5wdXRSb3cATmV4dFJvdwBnZXRfQXNzZW1ibHkAAACAm0kAcwBOAHUAbABsACAAcAByAG8AcABl
AHIAdAB5ACAAYwBhAG4AbgBvAHQAIABiAGUAIABzAGUAdAAgAHQAbwAgAEYAYQBsAHMAZQAuACAA
QQBzAHMAaQBnAG4AIABhACAAdgBhAGwAdQBlACAAdABvACAAdABoAGUAIABjAG8AbAB1AG0AbgAg
AGkAbgBzAHQAZQBhAGQALgAAD0kAbgBwAHUAdAAgADAAAHFTAEMAXwA3ADEAZABkADUANQAzAGQA
NQA5ADQAYwA0AGYANQA3AGEAOQBmADYAMwA0AGEAMwBhAGIAZQBmAGYANAAyAGUALgBQAHIAbwBw
AGUAcgB0AGkAZQBzAC4AUgBlAHMAbwB1AHIAYwBlAHMAAI8AesqVOYdCpwKQTAseK5sABCABAQgD
IAABBSABARERBCABAQ4FIAEBEVkDBwEICSADARI9HQgSQQUgAgEIHAMgAAIGIAICDhF1BSABHQgI
BgABEnkRfQUgABKAgQcgAgEOEoCBCLd6XFYZNOCJCImEXc2AgMyRAgYIAwYSFAMGEhgDBhJFAwYS
UQMGElUDBhIgBSABARIMBCABAQIJIAQBCA4SPRJBBSABARJFBAAAElEEAAASVQUAAQESVQQAABIg
AwAAAQMoAAgDKAACBAgAElEECAASVQQIABIgCAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0
aW9uVGhyb3dzAQgBAAIAAAAAACgBACNTQ183MWRkNTUzZDU5NGM0ZjU3YTlmNjM0YTNhYmVmZjQy
ZQAABQEAAAAAFgEAEUNvcHlyaWdodCBAICAyMDIxAABJAQAaLk5FVEZyYW1ld29yayxWZXJzaW9u
PXY0LjcBAFQOFEZyYW1ld29ya0Rpc3BsYXlOYW1lEi5ORVQgRnJhbWV3b3JrIDQuNwQBAAAAALQA
AADOyu++AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5SZXNvdXJjZVJlYWRlciwgbXNjb3JsaWIs
IFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1
NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVudGltZVJlc291cmNlU2V0AgAAAAAAAAAAAAAA
UEFEUEFEULQAAAAgMQAAAAAAAAAAAAA6MQAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALDEAAAAA
AAAAAAAAAABfQ29yRGxsTWFpbgBtc2NvcmVlLmRsbAAAAAAA/yUAIAAQAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAEAEAAAABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAA
AEgAAABYQAAA7AMAAAAAAAAAAAAA7AM0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8A
AAAAAL0E7/4AAAEAAAABAAAAAAAAAAEAAAAAAD8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABE
AAAAAQBWAGEAcgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8A
bgAAAAAAAACwBEwDAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAACgDAAABADAAMAAw
ADAAMAA0AGIAMAAAABoAAQABAEMAbwBtAG0AZQBuAHQAcwAAAAAAAAAiAAEAAQBDAG8AbQBwAGEA
bgB5AE4AYQBtAGUAAAAAAAAAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAA
AAAAUwBDAF8ANwAxAGQAZAA1ADUAMwBkADUAOQA0AGMANABmADUANwBhADkAZgA2ADMANABhADMA
YQBiAGUAZgBmADQAMgBlAAAAMAAIAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAu
ADAALgAwAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAEMAXwA3ADEAZABkADUA
NQAzAGQANQA5ADQAYwA0AGYANQA3AGEAOQBmADYAMwA0AGEAMwBhAGIAZQBmAGYANAAyAGUALgBk
AGwAbAAAAEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkAcgBpAGcA
aAB0ACAAQAAgACAAMgAwADIAMQAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBkAGUAbQBhAHIAawBz
AAAAAAAAAAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAFMAQwBfADcA
MQBkAGQANQA1ADMAZAA1ADkANABjADQAZgA1ADcAYQA5AGYANgAzADQAYQAzAGEAYgBlAGYAZgA0
ADIAZQAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAEMAXwA3ADEA
ZABkADUANQAzAGQANQA5ADQAYwA0AGYANQA3AGEAOQBmADYAMwA0AGEAMwBhAGIAZQBmAGYANAAy
AGUAAAA0AAgAAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADAALgAwAAAA
OAAIAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4AMAAuADAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAADAAAAEwxAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==]]></arrayElement>
                  </arrayElements>
                </property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package."
                  name="VSTAProjectName"
                  typeConverter="NOTBROWSABLE">SC_71dd553d594c4f57a9f634a3abeff42e</property>
                <property
                  dataType="System.String"
                  description="Specifies the programming language used by the script."
                  name="ScriptLanguage"
                  typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages">CSharp</property>
                <property
                  dataType="System.String"
                  description="Specifies a comma-separated list of read-only variables."
                  name="ReadOnlyVariables"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIVariablePickerDlg"></property>
                <property
                  dataType="System.String"
                  description="Specifies a comma-separated list of read/write variables."
                  name="ReadWriteVariables"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIWriteableVariablePickerDlg"></property>
                <property
                  dataType="System.String"
                  description="List of breakpoints present on the script."
                  isArray="true"
                  name="BreakpointCollection"
                  typeConverter="NOTBROWSABLE">
                  <arrayElements
                    arrayElementCount="0" />
                </property>
                <property
                  dataType="System.String"
                  description="Checksum to match component metedata against compiled codes."
                  name="MetadataChecksum140"
                  typeConverter="NOTBROWSABLE">CA</property>
                <property
                  dataType="System.String"
                  name="UserComponentTypeName">Microsoft.ScriptComponentHost</property>
              </properties>
              <inputs>
                <input
                  refId="Package\Extract license data\Generate source row number.Inputs[Input 0]"
                  hasSideEffects="true"
                  name="Input 0">
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Extract license data\Generate source row number.Outputs[Output 0]"
                  name="Output 0"
                  synchronousInputId="Package\Extract license data\Generate source row number.Inputs[Input 0]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Extract license data\Generate source row number.Outputs[Output 0].Columns[SourceRowNumber]"
                      dataType="i4"
                      lineageId="Package\Extract license data\Generate source row number.Outputs[Output 0].Columns[SourceRowNumber]"
                      name="SourceRowNumber" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Extract license data\Get license data from dataset"
              componentClassID="Microsoft.FlatFileSource"
              contactInfo="Flat File Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
              description="Flat File Source"
              localeId="2057"
              name="Get license data from dataset"
              usesDispositions="true"
              version="1">
              <properties>
                <property
                  dataType="System.Boolean"
                  description="Specifies whether zero-length columns are treated as null."
                  name="RetainNulls">false</property>
                <property
                  dataType="System.String"
                  description="Specifies the name of an output column containing the file name. If no name is specified, no output column containing the file name will be generated."
                  name="FileNameColumnName"></property>
              </properties>
              <connections>
                <connection
                  refId="Package\Extract license data\Get license data from dataset.Connections[FlatFileConnection]"
                  connectionManagerID="Package.ConnectionManagers[Licenses]"
                  connectionManagerRefId="Package.ConnectionManagers[Licenses]"
                  name="FlatFileConnection" />
              </connections>
              <outputs>
                <output
                  refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output]"
                  name="Flat File Source Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[DCALicenseNumber]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].ExternalColumns[DCA License Number]"
                      length="50"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[DCALicenseNumber]"
                      name="DCALicenseNumber"
                      truncationRowDisposition="RedirectRow">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[LicenseType]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].ExternalColumns[License Type]"
                      length="50"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[LicenseType]"
                      name="LicenseType"
                      truncationRowDisposition="RedirectRow">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[LicenseExpirationDate]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].ExternalColumns[License Expiration Date]"
                      length="50"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[LicenseExpirationDate]"
                      name="LicenseExpirationDate"
                      truncationRowDisposition="RedirectRow">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[LicenseStatus]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].ExternalColumns[License Status]"
                      length="50"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[LicenseStatus]"
                      name="LicenseStatus"
                      truncationRowDisposition="RedirectRow">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[LicenseCreationDate]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].ExternalColumns[License Creation Date]"
                      length="50"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[LicenseCreationDate]"
                      name="LicenseCreationDate"
                      truncationRowDisposition="RedirectRow">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[Industry]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].ExternalColumns[Industry]"
                      length="50"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[Industry]"
                      name="Industry"
                      truncationRowDisposition="RedirectRow">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[BusinessName]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].ExternalColumns[Business Name]"
                      length="300"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[BusinessName]"
                      name="BusinessName"
                      truncationRowDisposition="RedirectRow">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[BusinessName2]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].ExternalColumns[Business Name 2]"
                      length="100"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[BusinessName2]"
                      name="BusinessName2"
                      truncationRowDisposition="RedirectRow">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[AddressBuilding]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].ExternalColumns[Address Building]"
                      length="50"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[AddressBuilding]"
                      name="AddressBuilding"
                      truncationRowDisposition="RedirectRow">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[AddressStreetName]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].ExternalColumns[Address Street Name]"
                      length="75"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[AddressStreetName]"
                      name="AddressStreetName"
                      truncationRowDisposition="RedirectRow">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[SecondaryAddressStreetName]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].ExternalColumns[Secondary Address Street Name]"
                      length="75"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[SecondaryAddressStreetName]"
                      name="SecondaryAddressStreetName"
                      truncationRowDisposition="RedirectRow">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[AddressCity]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].ExternalColumns[Address City]"
                      length="50"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[AddressCity]"
                      name="AddressCity"
                      truncationRowDisposition="RedirectRow">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[AddressState]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].ExternalColumns[Address State]"
                      length="50"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[AddressState]"
                      name="AddressState"
                      truncationRowDisposition="RedirectRow">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[AddressZIP]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].ExternalColumns[Address ZIP]"
                      length="50"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[AddressZIP]"
                      name="AddressZIP"
                      truncationRowDisposition="RedirectRow">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[ContactPhoneNumber]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].ExternalColumns[Contact Phone Number]"
                      length="50"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[ContactPhoneNumber]"
                      name="ContactPhoneNumber"
                      truncationRowDisposition="RedirectRow">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[AddressBorough]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].ExternalColumns[Address Borough]"
                      length="50"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[AddressBorough]"
                      name="AddressBorough"
                      truncationRowDisposition="RedirectRow">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[BoroughCode]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].ExternalColumns[Borough Code]"
                      length="50"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[BoroughCode]"
                      name="BoroughCode"
                      truncationRowDisposition="RedirectRow">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[CommunityBoard]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].ExternalColumns[Community Board]"
                      length="50"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[CommunityBoard]"
                      name="CommunityBoard"
                      truncationRowDisposition="RedirectRow">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[CouncilDistrict]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].ExternalColumns[Council District]"
                      length="50"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[CouncilDistrict]"
                      name="CouncilDistrict"
                      truncationRowDisposition="RedirectRow">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[BIN]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].ExternalColumns[BIN]"
                      length="50"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[BIN]"
                      name="BIN"
                      truncationRowDisposition="RedirectRow">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[BBL]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].ExternalColumns[BBL]"
                      length="50"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[BBL]"
                      name="BBL"
                      truncationRowDisposition="RedirectRow">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[NTA]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].ExternalColumns[NTA]"
                      length="50"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[NTA]"
                      name="NTA"
                      truncationRowDisposition="RedirectRow">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[CensusTract]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].ExternalColumns[Census Tract]"
                      length="50"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[CensusTract]"
                      name="CensusTract"
                      truncationRowDisposition="RedirectRow">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[Detail]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].ExternalColumns[Detail]"
                      length="300"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[Detail]"
                      name="Detail"
                      truncationRowDisposition="RedirectRow">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[Longitude]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].ExternalColumns[Longitude]"
                      length="50"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[Longitude]"
                      name="Longitude"
                      truncationRowDisposition="RedirectRow">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[Latitude]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].ExternalColumns[Latitude]"
                      length="50"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[Latitude]"
                      name="Latitude"
                      truncationRowDisposition="RedirectRow">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[Location]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].ExternalColumns[Location]"
                      length="50"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[Location]"
                      name="Location"
                      truncationRowDisposition="RedirectRow">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                  </outputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].ExternalColumns[DCA License Number]"
                      dataType="wstr"
                      length="50"
                      name="DCA License Number" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].ExternalColumns[License Type]"
                      dataType="wstr"
                      length="50"
                      name="License Type" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].ExternalColumns[License Expiration Date]"
                      dataType="wstr"
                      length="50"
                      name="License Expiration Date" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].ExternalColumns[License Status]"
                      dataType="wstr"
                      length="50"
                      name="License Status" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].ExternalColumns[License Creation Date]"
                      dataType="wstr"
                      length="50"
                      name="License Creation Date" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].ExternalColumns[Industry]"
                      dataType="wstr"
                      length="50"
                      name="Industry" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].ExternalColumns[Business Name]"
                      dataType="wstr"
                      length="300"
                      name="Business Name" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].ExternalColumns[Business Name 2]"
                      dataType="wstr"
                      length="100"
                      name="Business Name 2" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].ExternalColumns[Address Building]"
                      dataType="wstr"
                      length="50"
                      name="Address Building" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].ExternalColumns[Address Street Name]"
                      dataType="wstr"
                      length="75"
                      name="Address Street Name" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].ExternalColumns[Secondary Address Street Name]"
                      dataType="wstr"
                      length="75"
                      name="Secondary Address Street Name" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].ExternalColumns[Address City]"
                      dataType="wstr"
                      length="50"
                      name="Address City" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].ExternalColumns[Address State]"
                      dataType="wstr"
                      length="50"
                      name="Address State" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].ExternalColumns[Address ZIP]"
                      dataType="wstr"
                      length="50"
                      name="Address ZIP" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].ExternalColumns[Contact Phone Number]"
                      dataType="wstr"
                      length="50"
                      name="Contact Phone Number" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].ExternalColumns[Address Borough]"
                      dataType="wstr"
                      length="50"
                      name="Address Borough" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].ExternalColumns[Borough Code]"
                      dataType="wstr"
                      length="50"
                      name="Borough Code" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].ExternalColumns[Community Board]"
                      dataType="wstr"
                      length="50"
                      name="Community Board" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].ExternalColumns[Council District]"
                      dataType="wstr"
                      length="50"
                      name="Council District" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].ExternalColumns[BIN]"
                      dataType="wstr"
                      length="50"
                      name="BIN" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].ExternalColumns[BBL]"
                      dataType="wstr"
                      length="50"
                      name="BBL" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].ExternalColumns[NTA]"
                      dataType="wstr"
                      length="50"
                      name="NTA" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].ExternalColumns[Census Tract]"
                      dataType="wstr"
                      length="50"
                      name="Census Tract" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].ExternalColumns[Detail]"
                      dataType="wstr"
                      length="300"
                      name="Detail" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].ExternalColumns[Longitude]"
                      dataType="wstr"
                      length="50"
                      name="Longitude" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].ExternalColumns[Latitude]"
                      dataType="wstr"
                      length="50"
                      name="Latitude" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].ExternalColumns[Location]"
                      dataType="wstr"
                      length="50"
                      name="Location" />
                  </externalMetadataColumns>
                </output>
                <output
                  refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Error Output]"
                  isErrorOut="true"
                  name="Flat File Source Error Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Error Output].Columns[Flat File Source Error Output Column]"
                      codePage="65001"
                      dataType="text"
                      description="Flat File Source Error Output Column"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Error Output].Columns[Flat File Source Error Output Column]"
                      name="Flat File Source Error Output Column" />
                    <outputColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Extract license data\Insert license data to LicenseExtract table"
              componentClassID="Microsoft.OLEDBDestination"
              contactInfo="OLE DB Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
              description="OLE DB Destination"
              name="Insert license data to LicenseExtract table"
              usesDispositions="true"
              version="4">
              <properties>
                <property
                  dataType="System.Int32"
                  description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                  name="CommandTimeout">0</property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the database object used to open a rowset."
                  name="OpenRowset">[DWSTAGE].[LicenseExtract]</property>
                <property
                  dataType="System.String"
                  description="Specifies the variable that contains the name of the database object used to open a rowset."
                  name="OpenRowsetVariable"></property>
                <property
                  dataType="System.String"
                  description="The SQL command to be executed."
                  name="SqlCommand"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                <property
                  dataType="System.Int32"
                  description="Specifies the column code page to use when code page information is unavailable from the data source."
                  name="DefaultCodePage">1252</property>
                <property
                  dataType="System.Boolean"
                  description="Forces the use of the DefaultCodePage property value when describing character data."
                  name="AlwaysUseDefaultCodePage">false</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the mode used to access the database."
                  name="AccessMode"
                  typeConverter="AccessMode">3</property>
                <property
                  dataType="System.Boolean"
                  description="Indicates whether the values supplied for identity columns will be copied to the destination. If false, values for identity columns will be auto-generated at the destination. Applies only if fast load is turned on."
                  name="FastLoadKeepIdentity">false</property>
                <property
                  dataType="System.Boolean"
                  description="Indicates whether the columns containing null will have null inserted in the destination. If false, columns containing null will have their default values inserted at the destination. Applies only if fast load is turned on."
                  name="FastLoadKeepNulls">false</property>
                <property
                  dataType="System.String"
                  description="Specifies options to be used with fast load.  Applies only if fast load is turned on."
                  name="FastLoadOptions">TABLOCK,CHECK_CONSTRAINTS</property>
                <property
                  dataType="System.Int32"
                  description="Specifies when commits are issued during data insertion.  A value of 0 specifies that one commit will be issued at the end of data insertion.  Applies only if fast load is turned on."
                  name="FastLoadMaxInsertCommitSize">2147483647</property>
              </properties>
              <connections>
                <connection
                  refId="Package\Extract license data\Insert license data to LicenseExtract table.Connections[OleDbConnection]"
                  connectionManagerID="Package.ConnectionManagers[LocalHost.Miniproject 1]"
                  connectionManagerRefId="Package.ConnectionManagers[LocalHost.Miniproject 1]"
                  description="The OLE DB runtime connection used to access the database."
                  name="OleDbConnection" />
              </connections>
              <inputs>
                <input
                  refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input]"
                  errorOrTruncationOperation="Insert"
                  errorRowDisposition="FailComponent"
                  hasSideEffects="true"
                  name="OLE DB Destination Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].Columns[BusinessName]"
                      cachedDataType="wstr"
                      cachedLength="300"
                      cachedName="BusinessName"
                      externalMetadataColumnId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[BusinessName]"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[BusinessName]" />
                    <inputColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].Columns[BusinessName2]"
                      cachedDataType="wstr"
                      cachedLength="100"
                      cachedName="BusinessName2"
                      externalMetadataColumnId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[BusinessName2]"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[BusinessName2]" />
                    <inputColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].Columns[Industry]"
                      cachedDataType="wstr"
                      cachedLength="50"
                      cachedName="Industry"
                      externalMetadataColumnId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[Industry]"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[Industry]" />
                    <inputColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].Columns[DCALicenseNumber]"
                      cachedDataType="wstr"
                      cachedLength="50"
                      cachedName="DCALicenseNumber"
                      externalMetadataColumnId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[DCALicenseNumber]"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[DCALicenseNumber]" />
                    <inputColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].Columns[LicenseType]"
                      cachedDataType="wstr"
                      cachedLength="50"
                      cachedName="LicenseType"
                      externalMetadataColumnId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[LicenseType]"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[LicenseType]" />
                    <inputColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].Columns[LicenseStatus]"
                      cachedDataType="wstr"
                      cachedLength="50"
                      cachedName="LicenseStatus"
                      externalMetadataColumnId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[LicenseStatus]"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[LicenseStatus]" />
                    <inputColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].Columns[AddressBuilding]"
                      cachedDataType="wstr"
                      cachedLength="50"
                      cachedName="AddressBuilding"
                      externalMetadataColumnId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[AddressBuilding]"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[AddressBuilding]" />
                    <inputColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].Columns[AddressStreetName]"
                      cachedDataType="wstr"
                      cachedLength="75"
                      cachedName="AddressStreetName"
                      externalMetadataColumnId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[AddressStreetName]"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[AddressStreetName]" />
                    <inputColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].Columns[SecondaryAddressStreetName]"
                      cachedDataType="wstr"
                      cachedLength="75"
                      cachedName="SecondaryAddressStreetName"
                      externalMetadataColumnId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[SecondaryAddressStreetName]"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[SecondaryAddressStreetName]" />
                    <inputColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].Columns[AddressCity]"
                      cachedDataType="wstr"
                      cachedLength="50"
                      cachedName="AddressCity"
                      externalMetadataColumnId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[AddressCity]"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[AddressCity]" />
                    <inputColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].Columns[AddressState]"
                      cachedDataType="wstr"
                      cachedLength="50"
                      cachedName="AddressState"
                      externalMetadataColumnId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[AddressState]"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[AddressState]" />
                    <inputColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].Columns[AddressZIP]"
                      cachedDataType="wstr"
                      cachedLength="50"
                      cachedName="AddressZIP"
                      externalMetadataColumnId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[AddressZIP]"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[AddressZIP]" />
                    <inputColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].Columns[ContactPhoneNumber]"
                      cachedDataType="wstr"
                      cachedLength="50"
                      cachedName="ContactPhoneNumber"
                      externalMetadataColumnId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[ContactPhoneNumber]"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[ContactPhoneNumber]" />
                    <inputColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].Columns[AddressBorough]"
                      cachedDataType="wstr"
                      cachedLength="50"
                      cachedName="AddressBorough"
                      externalMetadataColumnId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[AddressBorough]"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[AddressBorough]" />
                    <inputColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].Columns[BoroughCode]"
                      cachedDataType="wstr"
                      cachedLength="50"
                      cachedName="BoroughCode"
                      externalMetadataColumnId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[BoroughCode]"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[BoroughCode]" />
                    <inputColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].Columns[CommunityBoard]"
                      cachedDataType="wstr"
                      cachedLength="50"
                      cachedName="CommunityBoard"
                      externalMetadataColumnId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[CommunityBoard]"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[CommunityBoard]" />
                    <inputColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].Columns[CouncilDistrict]"
                      cachedDataType="wstr"
                      cachedLength="50"
                      cachedName="CouncilDistrict"
                      externalMetadataColumnId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[CouncilDistrict]"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[CouncilDistrict]" />
                    <inputColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].Columns[BIN]"
                      cachedDataType="wstr"
                      cachedLength="50"
                      cachedName="BIN"
                      externalMetadataColumnId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[BIN]"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[BIN]" />
                    <inputColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].Columns[BBL]"
                      cachedDataType="wstr"
                      cachedLength="50"
                      cachedName="BBL"
                      externalMetadataColumnId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[BBL]"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[BBL]" />
                    <inputColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].Columns[NTA]"
                      cachedDataType="wstr"
                      cachedLength="50"
                      cachedName="NTA"
                      externalMetadataColumnId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[NTA]"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[NTA]" />
                    <inputColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].Columns[CensusTract]"
                      cachedDataType="wstr"
                      cachedLength="50"
                      cachedName="CensusTract"
                      externalMetadataColumnId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[CensusTract]"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[CensusTract]" />
                    <inputColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].Columns[Detail]"
                      cachedDataType="wstr"
                      cachedLength="300"
                      cachedName="Detail"
                      externalMetadataColumnId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[Detail]"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[Detail]" />
                    <inputColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].Columns[Longitude]"
                      cachedDataType="wstr"
                      cachedLength="50"
                      cachedName="Longitude"
                      externalMetadataColumnId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[Longitude]"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[Longitude]" />
                    <inputColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].Columns[Latitude]"
                      cachedDataType="wstr"
                      cachedLength="50"
                      cachedName="Latitude"
                      externalMetadataColumnId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[Latitude]"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[Latitude]" />
                    <inputColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].Columns[Location]"
                      cachedDataType="wstr"
                      cachedLength="50"
                      cachedName="Location"
                      externalMetadataColumnId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[Location]"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[Location]" />
                    <inputColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].Columns[LicenseExpirationDate]"
                      cachedDataType="wstr"
                      cachedLength="50"
                      cachedName="LicenseExpirationDate"
                      externalMetadataColumnId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[LicenseExpirationDate]"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[LicenseExpirationDate]" />
                    <inputColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].Columns[LicenseCreationDate]"
                      cachedDataType="wstr"
                      cachedLength="50"
                      cachedName="LicenseCreationDate"
                      externalMetadataColumnId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[LicenseCreationDate]"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output].Columns[LicenseCreationDate]" />
                    <inputColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].Columns[SourceRowNumber]"
                      cachedDataType="i4"
                      cachedName="SourceRowNumber"
                      externalMetadataColumnId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[SourceRowNumber]"
                      lineageId="Package\Extract license data\Generate source row number.Outputs[Output 0].Columns[SourceRowNumber]" />
                  </inputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[BusinessName]"
                      dataType="wstr"
                      length="300"
                      name="BusinessName" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[BusinessName2]"
                      dataType="wstr"
                      length="100"
                      name="BusinessName2" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[Industry]"
                      dataType="wstr"
                      length="50"
                      name="Industry" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[DCALicenseNumber]"
                      dataType="wstr"
                      length="50"
                      name="DCALicenseNumber" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[LicenseType]"
                      dataType="wstr"
                      length="50"
                      name="LicenseType" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[LicenseExpirationDate]"
                      dataType="wstr"
                      length="50"
                      name="LicenseExpirationDate" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[LicenseStatus]"
                      dataType="wstr"
                      length="50"
                      name="LicenseStatus" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[LicenseCreationDate]"
                      dataType="wstr"
                      length="50"
                      name="LicenseCreationDate" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[AddressBuilding]"
                      dataType="wstr"
                      length="50"
                      name="AddressBuilding" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[AddressStreetName]"
                      dataType="wstr"
                      length="75"
                      name="AddressStreetName" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[SecondaryAddressStreetName]"
                      dataType="wstr"
                      length="75"
                      name="SecondaryAddressStreetName" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[AddressCity]"
                      dataType="wstr"
                      length="50"
                      name="AddressCity" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[AddressState]"
                      dataType="wstr"
                      length="50"
                      name="AddressState" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[AddressZIP]"
                      dataType="wstr"
                      length="50"
                      name="AddressZIP" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[ContactPhoneNumber]"
                      dataType="wstr"
                      length="50"
                      name="ContactPhoneNumber" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[AddressBorough]"
                      dataType="wstr"
                      length="50"
                      name="AddressBorough" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[BoroughCode]"
                      dataType="wstr"
                      length="50"
                      name="BoroughCode" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[CommunityBoard]"
                      dataType="wstr"
                      length="50"
                      name="CommunityBoard" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[CouncilDistrict]"
                      dataType="wstr"
                      length="50"
                      name="CouncilDistrict" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[BIN]"
                      dataType="wstr"
                      length="50"
                      name="BIN" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[BBL]"
                      dataType="wstr"
                      length="50"
                      name="BBL" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[NTA]"
                      dataType="wstr"
                      length="50"
                      name="NTA" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[CensusTract]"
                      dataType="wstr"
                      length="50"
                      name="CensusTract" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[Detail]"
                      dataType="wstr"
                      length="300"
                      name="Detail" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[Longitude]"
                      dataType="wstr"
                      length="50"
                      name="Longitude" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[Latitude]"
                      dataType="wstr"
                      length="50"
                      name="Latitude" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[Location]"
                      dataType="wstr"
                      length="50"
                      name="Location" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input].ExternalColumns[SourceRowNumber]"
                      dataType="i4"
                      name="SourceRowNumber" />
                  </externalMetadataColumns>
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Extract license data\Insert license data to LicenseExtract table.Outputs[OLE DB Destination Error Output]"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="OLE DB Destination Error Output"
                  synchronousInputId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Extract license data\Insert license data to LicenseExtract table.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Extract license data\Insert license data to LicenseExtract table.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Extract license data\Insert license data to LicenseExtract table.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Extract license data\Redirect errors"
              componentClassID="Microsoft.FlatFileDestination"
              contactInfo="Flat File Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
              description="Flat File Destination"
              localeId="2057"
              name="Redirect errors"
              version="1">
              <properties>
                <property
                  dataType="System.Boolean"
                  description="Specifies whether the data will overwrite or append to the destination file."
                  name="Overwrite">true</property>
                <property
                  dataType="System.Null"
                  description="Specifies the text to write to the destination file before any data is written."
                  expressionType="Notify"
                  name="Header" />
                <property
                  dataType="System.Boolean"
                  description="When text qualifier is enabled, specifies whether the text qualifier in the data written to the destination file will be escaped or not."
                  name="EscapeQualifier">false</property>
              </properties>
              <connections>
                <connection
                  refId="Package\Extract license data\Redirect errors.Connections[FlatFileConnection]"
                  connectionManagerID="Package.ConnectionManagers[Licenses - errors]"
                  connectionManagerRefId="Package.ConnectionManagers[Licenses - errors]"
                  name="FlatFileConnection" />
              </connections>
              <inputs>
                <input
                  refId="Package\Extract license data\Redirect errors.Inputs[Flat File Destination Input]"
                  hasSideEffects="true"
                  name="Flat File Destination Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Extract license data\Redirect errors.Inputs[Flat File Destination Input].Columns[Flat File Source Error Output Column]"
                      cachedCodepage="65001"
                      cachedDataType="text"
                      cachedName="Flat File Source Error Output Column"
                      externalMetadataColumnId="Package\Extract license data\Redirect errors.Inputs[Flat File Destination Input].ExternalColumns[Flat File Source Error Output Column]"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Error Output].Columns[Flat File Source Error Output Column]" />
                    <inputColumn
                      refId="Package\Extract license data\Redirect errors.Inputs[Flat File Destination Input].Columns[ErrorCode]"
                      cachedDataType="i4"
                      cachedName="ErrorCode"
                      externalMetadataColumnId="Package\Extract license data\Redirect errors.Inputs[Flat File Destination Input].ExternalColumns[ErrorCode]"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Error Output].Columns[ErrorCode]" />
                    <inputColumn
                      refId="Package\Extract license data\Redirect errors.Inputs[Flat File Destination Input].Columns[ErrorColumn]"
                      cachedDataType="i4"
                      cachedName="ErrorColumn"
                      externalMetadataColumnId="Package\Extract license data\Redirect errors.Inputs[Flat File Destination Input].ExternalColumns[ErrorColumn]"
                      lineageId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Error Output].Columns[ErrorColumn]" />
                  </inputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Extract license data\Redirect errors.Inputs[Flat File Destination Input].ExternalColumns[Flat File Source Error Output Column]"
                      codePage="65001"
                      dataType="text"
                      name="Flat File Source Error Output Column" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Redirect errors.Inputs[Flat File Destination Input].ExternalColumns[ErrorCode]"
                      dataType="i4"
                      name="ErrorCode" />
                    <externalMetadataColumn
                      refId="Package\Extract license data\Redirect errors.Inputs[Flat File Destination Input].ExternalColumns[ErrorColumn]"
                      dataType="i4"
                      name="ErrorColumn" />
                  </externalMetadataColumns>
                </input>
              </inputs>
            </component>
          </components>
          <paths>
            <path
              refId="Package\Extract license data.Paths[Flat File Source Error Output]"
              endId="Package\Extract license data\Redirect errors.Inputs[Flat File Destination Input]"
              name="Flat File Source Error Output"
              startId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Error Output]" />
            <path
              refId="Package\Extract license data.Paths[Flat File Source Output]"
              endId="Package\Extract license data\Generate source row number.Inputs[Input 0]"
              name="Flat File Source Output"
              startId="Package\Extract license data\Get license data from dataset.Outputs[Flat File Source Output]" />
            <path
              refId="Package\Extract license data.Paths[Output 0]"
              endId="Package\Extract license data\Insert license data to LicenseExtract table.Inputs[OLE DB Destination Input]"
              name="Output 0"
              startId="Package\Extract license data\Generate source row number.Outputs[Output 0]" />
          </paths>
        </pipeline>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Extract payment data"
      DTS:CreationName="Microsoft.Pipeline"
      DTS:Description="Data Flow Task"
      DTS:DTSID="{7b878f99-0a3b-494a-8544-2593554458a7}"
      DTS:ExecutableType="Microsoft.Pipeline"
      DTS:LocaleID="-1"
      DTS:ObjectName="Extract payment data"
      DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
      <DTS:Variables />
      <DTS:ObjectData>
        <pipeline
          version="1">
          <components>
            <component
              refId="Package\Extract payment data\Generate source row number"
              componentClassID="Microsoft.ManagedComponentHost"
              contactInfo="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum.;Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;12"
              description="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum."
              name="Generate source row number"
              version="12">
              <properties>
                <property
                  dataType="System.String"
                  description="Stores the source code of the component"
                  isArray="true"
                  name="SourceCode"
                  state="cdata">
                  <arrayElements
                    arrayElementCount="30">
                    <arrayElement
                      dataType="System.String"><![CDATA[ComponentWrapper.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public override void ProcessInput(int InputID, string InputName, PipelineBuffer Buffer, OutputNameMap OutputMap)
    {

        if (InputName.Equals(@"Input 0", StringComparison.Ordinal))
        {
            Input0_ProcessInput(new Input0Buffer(Buffer, GetColumnIndexes(InputID), OutputMap));
        }

    }

    public virtual void Input0_ProcessInput(Input0Buffer Buffer)
    {
        while (Buffer.NextRow())
        {
            Input0_ProcessInputRow(Buffer);
        }
    }

    public virtual void Input0_ProcessInputRow(Input0Buffer Row)
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Resources.resx]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[main.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[#region Help:  Introduction to the Script Component
/* The Script Component allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services data flow.
 *
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script component. */
#endregion

#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
#endregion

/// <summary>
/// This is the class to which to add your code.  Do not change the name, attributes, or parent
/// of this class.
/// </summary>
[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{
    #region Help:  Using Integration Services variables and parameters
    /* To use a variable in this script, first ensure that the variable has been added to
     * either the list contained in the ReadOnlyVariables property or the list contained in
     * the ReadWriteVariables property of this script component, according to whether or not your
     * code needs to write into the variable.  To do so, save this script, close this instance of
     * Visual Studio, and update the ReadOnlyVariables and ReadWriteVariables properties in the
     * Script Transformation Editor window.
     * To use a parameter in this script, follow the same steps. Parameters are always read-only.
     *
     * Example of reading from a variable or parameter:
     *  DateTime startTime = Variables.MyStartTime;
     *
     * Example of writing to a variable:
     *  Variables.myStringVariable = "new value";
     */
    #endregion

    #region Help:  Using Integration Services Connnection Managers
    /* Some types of connection managers can be used in this script component.  See the help topic
     * "Working with Connection Managers Programatically" for details.
     *
     * To use a connection manager in this script, first ensure that the connection manager has
     * been added to either the list of connection managers on the Connection Managers page of the
     * script component editor.  To add the connection manager, save this script, close this instance of
     * Visual Studio, and add the Connection Manager to the list.
     *
     * If the component needs to hold a connection open while processing rows, override the
     * AcquireConnections and ReleaseConnections methods.
     * 
     * Example of using an ADO.Net connection manager to acquire a SqlConnection:
     *  object rawConnection = Connections.SalesDB.AcquireConnection(transaction);
     *  SqlConnection salesDBConn = (SqlConnection)rawConnection;
     *
     * Example of using a File connection manager to acquire a file path:
     *  object rawConnection = Connections.Prices_zip.AcquireConnection(transaction);
     *  string filePath = (string)rawConnection;
     *
     * Example of releasing a connection manager:
     *  Connections.SalesDB.ReleaseConnection(rawConnection);
     */
    #endregion

    #region Help:  Firing Integration Services Events
    /* This script component can fire events.
     *
     * Example of firing an error event:
     *  ComponentMetaData.FireError(10, "Process Values", "Bad value", "", 0, out cancel);
     *
     * Example of firing an information event:
     *  ComponentMetaData.FireInformation(10, "Process Values", "Processing has started", "", 0, fireAgain);
     *
     * Example of firing a warning event:
     *  ComponentMetaData.FireWarning(10, "Process Values", "No rows were received", "", 0);
     */
    #endregion

    /// <summary>
    /// This method is called once, before rows begin to be processed in the data flow.
    ///
    /// You can remove this method if you don't need to do anything here.
    /// </summary>
    private int _sourceRowNumber;

    /// <summary>
    /// This method is called once, before rows begin to be processed in the data flow.
    ///
    /// You can remove this method if you don't need to do anything here.
    /// </summary>
    public override void PreExecute()
    {
        base.PreExecute();
        _sourceRowNumber = 1;
    }

    /// <summary>
    /// This method is called after all the rows have passed through this component.
    ///
    /// You can delete this method if you don't need to do anything here.
    /// </summary>
    public override void PostExecute()
    {
        base.PostExecute();
        /*
         * Add your code here
         */
    }

    /// <summary>
    /// This method is called once for every row that passes through the component from Input0.
    ///
    /// Example of reading a value from a column in the the row:
    ///  string zipCode = Row.ZipCode
    ///
    /// Example of writing a value to a column in the row:
    ///  Row.ZipCode = zipCode
    /// </summary>
    /// <param name="Row">The row that is currently passing through the component</param>
    public override void Input0_ProcessInputRow(Input0Buffer Row)
    {
        Row.SourceRowNumber = _sourceRowNumber++;
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[BufferWrapper.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class Input0Buffer: ScriptBuffer

{
    public Input0Buffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public Int32 SourceRowNumber
    {
        set
        {
            this[0] = value;
        }
    }
    public bool SourceRowNumber_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public bool NextRow()
    {
        return base.NextRow();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Settings.Designer.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_0295cf8eb2ea45c182237331078e7066.Properties.Settings.get_Default():SC_0295cf8eb2ea45c182237331078e7066.Properties.Sett" +
    "ings")]

namespace SC_0295cf8eb2ea45c182237331078e7066.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[SC_0295cf8eb2ea45c182237331078e7066.csproj]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{1f8f324c-d3c0-4dd3-93c2-d53f2384b948}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>SC_0295cf8eb2ea45c182237331078e7066</RootNamespace>
    <AssemblyName>SC_0295cf8eb2ea45c182237331078e7066</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.TxScript, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Compile Include="main.cs" />
    <Compile Include="BufferWrapper.cs" />
    <Compile Include="ComponentWrapper.cs" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="ScriptComponent" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="" DebugInfoCommandLine="" DebugInfoWorkingDir="" IconImageList="" />
        <Host Name="ScriptComponent" GeneratedNamespace="SC_0295cf8eb2ea45c182237331078e7066" IconIndex="0"></Host>
        <ProjectClient>
          <HostIdentifier>SSIS_SC150</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Project]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF16LE]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:Language>msBuild</msb:Language>
    <msb:CodeName>SC_0295cf8eb2ea45c182237331078e7066</msb:CodeName>
    <msb:DisplayName>SC_0295cf8eb2ea45c182237331078e7066</msb:DisplayName>
    <msb:ProjectId>{394EE88B-0EE7-44B2-B2CF-5445A30C46B9}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="SC_0295cf8eb2ea45c182237331078e7066.csproj" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="main.cs" />
    <msb:File Include="BufferWrapper.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ComponentWrapper.cs" />
  </msb:ItemGroup>
</c:Project>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\AssemblyInfo.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_0295cf8eb2ea45c182237331078e7066")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("SC_0295cf8eb2ea45c182237331078e7066")]
[assembly: AssemblyCopyright("Copyright @  2021")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.0.0")]
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Settings.settings]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Resources.Designer.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_0295cf8eb2ea45c182237331078e7066.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_0295cf8eb2ea45c182237331078e7066.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_0295cf8eb2ea45c182237331078e7066.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace SC_0295cf8eb2ea45c182237331078e7066.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_0295cf8eb2ea45c182237331078e7066.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement>
                  </arrayElements>
                </property>
                <property
                  dataType="System.String"
                  description="Stores the binary representation of the component"
                  isArray="true"
                  name="BinaryCode"
                  state="cdata">
                  <arrayElements
                    arrayElementCount="2">
                    <arrayElement
                      dataType="System.String"><![CDATA[SC_0295cf8eb2ea45c182237331078e7066.dll]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAO7WtGAAAAAAAAAAAOAAIiALATAAABIAAAAIAAAAAAAASjEA
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAPgwAABPAAAAAEAAAEgEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAUBEAAAAgAAAAEgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAEgEAAAAQAAAAAYAAAAUAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAGgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAAAs
MQAAAAAAAEgAAAACAAUArCEAAJQOAAABAAAAAAAAAEAwAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAADoCKBAAAAoCF30BAAAEKh4CKBEAAAoqABMwBAAYAAAAAQAA
EQMCAnsBAAAECgYXWH0BAAAEBm8GAAAGKh4CKAoAAAYqKgIDBAUoEgAACio6AhYDjBoAAAEoEwAA
CipaAywIAhYoFAAACipyAQAAcHMVAAAKeh4CKBYAAAoqHgIoFwAACip+AigYAAAKAgJzDgAABn0C
AAAEAgJzDwAABn0DAAAEKpIEcp4AAHAabxkAAAosFQIFAgMoGgAACg4EcwUAAAZvDAAABipKKwcC
A28NAAAGA28IAAAGLfEqBio6AigbAAAKAgN9BAAABCo6AigbAAAKAgN9BQAABCoeAigbAAAKKq5+
BgAABC0ecq4AAHDQBwAAAigcAAAKbx0AAApzHgAACoAGAAAEfgYAAAQqGn4HAAAEKh4CgAcAAAQq
Gn4IAAAEKh4CKB8AAAoqLnMVAAAGgAgAAAQqAEJTSkIBAAEAAAAAAAwAAAB2NC4wLjMwMzE5AAAA
AAUAbAAAACwFAAAjfgAAmAUAADgGAAAjU3RyaW5ncwAAAADQCwAAIAEAACNVUwDwDAAAEAAAACNH
VUlEAAAAAA0AAJQBAAAjQmxvYgAAAAAAAAACAAABVxWiAQkBAAAA+gEzABYAAAEAAAAgAAAACAAA
AAgAAAAWAAAADwAAAB8AAAAQAAAAAQAAAAMAAAAFAAAABgAAAAEAAAAEAAAAAQAAAAAA8AIBAAAA
AAAGAOoBbwQGAH4CbwQGADYBXAQPAOMEAAAGAGMBjAMGAM0BjAMGAK4BjAMGAGUCjAMGAAoCjAMG
ACMCjAMGAHoBjAMGAJUBuQIKAD4CgwAKAC4EgwAOAB8EgwAKANUDgwAKAKkFgwAGAGwFRAMGABkB
XAQGAD8EjwQGAMkDdwMSAOkA2gISAEoB2gISANEAYgMGAP4AbwQGAAEARAMGAJ4DRAMGANMCRAMG
ALgDRAMGAKQARAMGAFUARAMGAC4GjAMAAAAAKwAAAAAAAQABAAEAEABXAwAAEAABAAEAAQAQABIE
AAA5AAIABQABABAAiwUAAEUAAgAKAAEAEABgBQAASQAEAA4AAQAQACEFAABJAAUADwAAABAAlgTy
BEkABgAQAAABEABQBfIEYQAIABQAAQABBGcABgBgBWoABgAhBW4AAQCZBXIAAQCZBXIAEQBLA3YA
EQDBAHoAEQBFAH4AUCAAAAAAxgCcAgYAAQBfIAAAAADGAKcCBgABAGggAAAAAMYACwaCAAEAjCAA
AAAAhhhPBAYAAgCUIAAAAACGGE8EHwACAJ8gAAAAAIYI7QMBAAUAriAAAAAAhggYA4gABgDFIAAA
AACGACIGLwAHAM0gAAAAAIYAcwUvAAcA1SAAAAAAhhhPBAYABwD1IAAAAADGAP4FjQAHABohAAAA
AMYB9wWCAAsALSEAAAAAxgELBoIADAAvIQAAAACGGE8ElwANAD4hAAAAAIYYTwSXAA4ATSEAAAAA
gxhPBAYADwBVIQAAAACTCDsEnQAPAIEhAAAAAJMIqQCiAA8AiCEAAAAAkwi1AKcADwCQIQAAAACW
CH8FrQAQAJchAAAAAIYYTwQGABAAnyEAAAAAkRhVBLIAEAAAAAEAJgYAAAEANAQAAAIAKwUAAAMA
4wMAAAEAswIAAAEAswIAAAEANAAAAAIAeQAAAAMANAQAAAQA4wMAAAEANAQAAAEAJgYAAAEArwUA
AAEArwUAAAEAswIJAE8EAQARAE8EBgAZAE8ECgApAE8EEAAxAE8EEAA5AE8EEABBAE8EEABJAE8E
EABRAE8EEABZAE8EEABhAE8EEABpAE8EBgCZAE8EBgC5AE8EFQDJAE8EBgCJAJwCBgCJAKcCBgBx
AE8EHwBxADsDKQBxADMDAQDZAE8EEABxACIGLwBxAHMFLwCJAE8EBgDhAFkFMwCJAD8FOgCRAE8E
BgDxAGcAQADxACoGRwChAE8ETQDBAE8EBgAuAAsAzQAuABMA1gAuABsA9QAuACMA/gAuACsAJwEu
ADMAJwEuADsAJwEuAEMA/gAuAEsALQEuAFMAJwEuAFsARAFDAGMAjgFpAHMA9QCJAHMA9QDjAGsA
jgEBAXsAjgEbAAMAAQAHAAMACAAFAAAA8QO2AAAAHAO6AAAAPwS+AAAAyQDDAAAAgwXIAAEABgAD
AAEABwAFAAIAEQAHAAIAEgAJAAEAEwAJAAIAFAALAASAAAABAAAAAAAAAAAAAAAAAAcAAAAEAAAA
AAAAAAAAAABVADwAAAAAAA8AAAAAAAAAAAAAAF4AuQUAAAAADwAAAAAAAAAAAAAAXgDWBQAAAAAE
AAAAAAAAAAAAAABVAEQDAAAAAAAAAAABAAAAoAQAAAAAAAAASW50MzIAU0NfMDI5NWNmOGViMmVh
NDVjMTgyMjM3MzMxMDc4ZTcwNjYAPE1vZHVsZT4ASW5wdXRJRABtc2NvcmxpYgBkZWZhdWx0SW5z
dGFuY2UAUnVudGltZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUASW5wdXROYW1lAE1pY3Jv
c29mdC5TcWxTZXJ2ZXIuRHRzLlBpcGVsaW5lAFR5cGUAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUA
cmVzb3VyY2VDdWx0dXJlAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAEVkaXRvckJyb3dzYWJsZVN0
YXRlAENvbXBpbGVyR2VuZXJhdGVkQXR0cmlidXRlAERlYnVnZ2VyTm9uVXNlckNvZGVBdHRyaWJ1
dGUARGVidWdnYWJsZUF0dHJpYnV0ZQBFZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUAQXNzZW1ibHlU
aXRsZUF0dHJpYnV0ZQBBc3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBUYXJnZXRGcmFtZXdvcmtB
dHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRp
b25BdHRyaWJ1dGUAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBBc3NlbWJseVByb2R1
Y3RBdHRyaWJ1dGUAQXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAU1NJU1NjcmlwdENvbXBvbmVu
dEVudHJ5UG9pbnRBdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRlAFJ1bnRpbWVDb21w
YXRpYmlsaXR5QXR0cmlidXRlAFByZUV4ZWN1dGUAUG9zdEV4ZWN1dGUAdmFsdWUAU3lzdGVtLlJ1
bnRpbWUuVmVyc2lvbmluZwBTdHJpbmcAU3lzdGVtLkNvbXBvbmVudE1vZGVsAFNDXzAyOTVjZjhl
YjJlYTQ1YzE4MjIzNzMzMTA3OGU3MDY2LmRsbABzZXRfU291cmNlUm93TnVtYmVyX0lzTnVsbABT
ZXROdWxsAHNldF9JdGVtAFN5c3RlbQByZXNvdXJjZU1hbgBTY3JpcHRNYWluAFN5c3RlbS5Db25m
aWd1cmF0aW9uAFN5c3RlbS5HbG9iYWxpemF0aW9uAFN5c3RlbS5SZWZsZWN0aW9uAEludmFsaWRP
cGVyYXRpb25FeGNlcHRpb24AU3RyaW5nQ29tcGFyaXNvbgBDdWx0dXJlSW5mbwBPdXRwdXROYW1l
TWFwAE91dHB1dE1hcABzZXRfU291cmNlUm93TnVtYmVyAF9zb3VyY2VSb3dOdW1iZXIASW5wdXQw
QnVmZmVyAFBpcGVsaW5lQnVmZmVyAFNjcmlwdEJ1ZmZlcgBnZXRfUmVzb3VyY2VNYW5hZ2VyAC5j
dG9yAC5jY3RvcgBTeXN0ZW0uRGlhZ25vc3RpY3MAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2
aWNlcwBTeXN0ZW0uUmVzb3VyY2VzAFNDXzAyOTVjZjhlYjJlYTQ1YzE4MjIzNzMzMTA3OGU3MDY2
LlByb3BlcnRpZXMuUmVzb3VyY2VzLnJlc291cmNlcwBEZWJ1Z2dpbmdNb2RlcwBTQ18wMjk1Y2Y4
ZWIyZWE0NWMxODIyMzczMzEwNzhlNzA2Ni5Qcm9wZXJ0aWVzAFZhcmlhYmxlcwBCdWZmZXJDb2x1
bW5JbmRleGVzAEdldENvbHVtbkluZGV4ZXMAU2V0dGluZ3MARXF1YWxzAENvbm5lY3Rpb25zAE9i
amVjdABFbmRPZlJvd3NldABnZXRfRGVmYXVsdABVc2VyQ29tcG9uZW50AFBhcmVudENvbXBvbmVu
dABTY3JpcHRDb21wb25lbnQATWljcm9zb2Z0LlNxbFNlcnZlci5UeFNjcmlwdABNaWNyb3NvZnQu
U3FsU2VydmVyLlBpcGVsaW5lSG9zdABJbnB1dDBfUHJvY2Vzc0lucHV0AElucHV0MF9Qcm9jZXNz
SW5wdXRSb3cATmV4dFJvdwBnZXRfQXNzZW1ibHkAAACAm0kAcwBOAHUAbABsACAAcAByAG8AcABl
AHIAdAB5ACAAYwBhAG4AbgBvAHQAIABiAGUAIABzAGUAdAAgAHQAbwAgAEYAYQBsAHMAZQAuACAA
QQBzAHMAaQBnAG4AIABhACAAdgBhAGwAdQBlACAAdABvACAAdABoAGUAIABjAG8AbAB1AG0AbgAg
AGkAbgBzAHQAZQBhAGQALgAAD0kAbgBwAHUAdAAgADAAAHFTAEMAXwAwADIAOQA1AGMAZgA4AGUA
YgAyAGUAYQA0ADUAYwAxADgAMgAyADMANwAzADMAMQAwADcAOABlADcAMAA2ADYALgBQAHIAbwBw
AGUAcgB0AGkAZQBzAC4AUgBlAHMAbwB1AHIAYwBlAHMAABmXXGeeh2VMnnn6Nt3TEXgABCABAQgD
IAABBSABARERBCABAQ4FIAEBEVkDBwEICSADARI9HQgSQQUgAgEIHAMgAAIGIAICDhF1BSABHQgI
BgABEnkRfQUgABKAgQcgAgEOEoCBCLd6XFYZNOCJCImEXc2AgMyRAgYIAwYSFAMGEhgDBhJFAwYS
UQMGElUDBhIgBSABARIMBCABAQIJIAQBCA4SPRJBBSABARJFBAAAElEEAAASVQUAAQESVQQAABIg
AwAAAQMoAAgDKAACBAgAElEECAASVQQIABIgCAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0
aW9uVGhyb3dzAQgBAAIAAAAAACgBACNTQ18wMjk1Y2Y4ZWIyZWE0NWMxODIyMzczMzEwNzhlNzA2
NgAABQEAAAAAFgEAEUNvcHlyaWdodCBAICAyMDIxAABJAQAaLk5FVEZyYW1ld29yayxWZXJzaW9u
PXY0LjcBAFQOFEZyYW1ld29ya0Rpc3BsYXlOYW1lEi5ORVQgRnJhbWV3b3JrIDQuNwQBAAAAALQA
AADOyu++AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5SZXNvdXJjZVJlYWRlciwgbXNjb3JsaWIs
IFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1
NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVudGltZVJlc291cmNlU2V0AgAAAAAAAAAAAAAA
UEFEUEFEULQAAAAgMQAAAAAAAAAAAAA6MQAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALDEAAAAA
AAAAAAAAAABfQ29yRGxsTWFpbgBtc2NvcmVlLmRsbAAAAAAA/yUAIAAQAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAEAEAAAABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAA
AEgAAABYQAAA7AMAAAAAAAAAAAAA7AM0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8A
AAAAAL0E7/4AAAEAAAABAAAAAAAAAAEAAAAAAD8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABE
AAAAAQBWAGEAcgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8A
bgAAAAAAAACwBEwDAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAACgDAAABADAAMAAw
ADAAMAA0AGIAMAAAABoAAQABAEMAbwBtAG0AZQBuAHQAcwAAAAAAAAAiAAEAAQBDAG8AbQBwAGEA
bgB5AE4AYQBtAGUAAAAAAAAAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAA
AAAAUwBDAF8AMAAyADkANQBjAGYAOABlAGIAMgBlAGEANAA1AGMAMQA4ADIAMgAzADcAMwAzADEA
MAA3ADgAZQA3ADAANgA2AAAAMAAIAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAu
ADAALgAwAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAEMAXwAwADIAOQA1AGMA
ZgA4AGUAYgAyAGUAYQA0ADUAYwAxADgAMgAyADMANwAzADMAMQAwADcAOABlADcAMAA2ADYALgBk
AGwAbAAAAEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkAcgBpAGcA
aAB0ACAAQAAgACAAMgAwADIAMQAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBkAGUAbQBhAHIAawBz
AAAAAAAAAAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAFMAQwBfADAA
MgA5ADUAYwBmADgAZQBiADIAZQBhADQANQBjADEAOAAyADIAMwA3ADMAMwAxADAANwA4AGUANwAw
ADYANgAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAEMAXwAwADIA
OQA1AGMAZgA4AGUAYgAyAGUAYQA0ADUAYwAxADgAMgAyADMANwAzADMAMQAwADcAOABlADcAMAA2
ADYAAAA0AAgAAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADAALgAwAAAA
OAAIAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4AMAAuADAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAADAAAAEwxAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==]]></arrayElement>
                  </arrayElements>
                </property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package."
                  name="VSTAProjectName"
                  typeConverter="NOTBROWSABLE">SC_0295cf8eb2ea45c182237331078e7066</property>
                <property
                  dataType="System.String"
                  description="Specifies the programming language used by the script."
                  name="ScriptLanguage"
                  typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages">CSharp</property>
                <property
                  dataType="System.String"
                  description="Specifies a comma-separated list of read-only variables."
                  name="ReadOnlyVariables"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIVariablePickerDlg"></property>
                <property
                  dataType="System.String"
                  description="Specifies a comma-separated list of read/write variables."
                  name="ReadWriteVariables"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIWriteableVariablePickerDlg"></property>
                <property
                  dataType="System.String"
                  description="List of breakpoints present on the script."
                  isArray="true"
                  name="BreakpointCollection"
                  typeConverter="NOTBROWSABLE">
                  <arrayElements
                    arrayElementCount="0" />
                </property>
                <property
                  dataType="System.String"
                  description="Checksum to match component metedata against compiled codes."
                  name="MetadataChecksum140"
                  typeConverter="NOTBROWSABLE">CA</property>
                <property
                  dataType="System.String"
                  name="UserComponentTypeName">Microsoft.ScriptComponentHost</property>
              </properties>
              <inputs>
                <input
                  refId="Package\Extract payment data\Generate source row number.Inputs[Input 0]"
                  hasSideEffects="true"
                  name="Input 0">
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Extract payment data\Generate source row number.Outputs[Output 0]"
                  name="Output 0"
                  synchronousInputId="Package\Extract payment data\Generate source row number.Inputs[Input 0]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Extract payment data\Generate source row number.Outputs[Output 0].Columns[SourceRowNumber]"
                      dataType="i4"
                      lineageId="Package\Extract payment data\Generate source row number.Outputs[Output 0].Columns[SourceRowNumber]"
                      name="SourceRowNumber" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Extract payment data\Get payment data from dataset"
              componentClassID="Microsoft.FlatFileSource"
              contactInfo="Flat File Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
              description="Flat File Source"
              localeId="2057"
              name="Get payment data from dataset"
              usesDispositions="true"
              version="1">
              <properties>
                <property
                  dataType="System.Boolean"
                  description="Specifies whether zero-length columns are treated as null."
                  name="RetainNulls">false</property>
                <property
                  dataType="System.String"
                  description="Specifies the name of an output column containing the file name. If no name is specified, no output column containing the file name will be generated."
                  name="FileNameColumnName"></property>
              </properties>
              <connections>
                <connection
                  refId="Package\Extract payment data\Get payment data from dataset.Connections[FlatFileConnection]"
                  connectionManagerID="Package.ConnectionManagers[Payments]"
                  connectionManagerRefId="Package.ConnectionManagers[Payments]"
                  name="FlatFileConnection" />
              </connections>
              <outputs>
                <output
                  refId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output]"
                  name="Flat File Source Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].Columns[RecordId]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].ExternalColumns[RECORD ID]"
                      length="50"
                      lineageId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].Columns[RecordId]"
                      name="RecordId"
                      truncationRowDisposition="RedirectRow">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].Columns[BusinessName]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].ExternalColumns[BUSINESS NAME]"
                      length="300"
                      lineageId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].Columns[BusinessName]"
                      name="BusinessName"
                      truncationRowDisposition="RedirectRow">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].Columns[BusinessName2]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].ExternalColumns[BUSINESS NAME2]"
                      length="100"
                      lineageId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].Columns[BusinessName2]"
                      name="BusinessName2"
                      truncationRowDisposition="RedirectRow">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].Columns[Industry]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].ExternalColumns[INDUSTRY]"
                      length="50"
                      lineageId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].Columns[Industry]"
                      name="Industry"
                      truncationRowDisposition="RedirectRow">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].Columns[FeeSequenceId]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].ExternalColumns[FEE SEQUENCE ID]"
                      length="50"
                      lineageId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].Columns[FeeSequenceId]"
                      name="FeeSequenceId"
                      truncationRowDisposition="RedirectRow">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].Columns[FeeType]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].ExternalColumns[FEE TYPE]"
                      length="50"
                      lineageId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].Columns[FeeType]"
                      name="FeeType"
                      truncationRowDisposition="RedirectRow">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].Columns[FeeDescription]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].ExternalColumns[FEE DESCRIPTION]"
                      length="100"
                      lineageId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].Columns[FeeDescription]"
                      name="FeeDescription"
                      truncationRowDisposition="RedirectRow">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].Columns[RecordType]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].ExternalColumns[RECORD DYPE]"
                      length="50"
                      lineageId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].Columns[RecordType]"
                      name="RecordType"
                      truncationRowDisposition="RedirectRow">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].Columns[PaymentAmount]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].ExternalColumns[PAYMENT AMOUNT]"
                      length="50"
                      lineageId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].Columns[PaymentAmount]"
                      name="PaymentAmount"
                      truncationRowDisposition="RedirectRow">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].Columns[TransactionType]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].ExternalColumns[TRANSACTION TYPE]"
                      length="50"
                      lineageId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].Columns[TransactionType]"
                      name="TransactionType"
                      truncationRowDisposition="RedirectRow">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].Columns[PaymentDate]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].ExternalColumns[PAYMENT DATE]"
                      length="50"
                      lineageId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].Columns[PaymentDate]"
                      name="PaymentDate"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                  </outputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].ExternalColumns[RECORD ID]"
                      dataType="wstr"
                      length="50"
                      name="RECORD ID" />
                    <externalMetadataColumn
                      refId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].ExternalColumns[BUSINESS NAME]"
                      dataType="wstr"
                      length="300"
                      name="BUSINESS NAME" />
                    <externalMetadataColumn
                      refId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].ExternalColumns[BUSINESS NAME2]"
                      dataType="wstr"
                      length="100"
                      name="BUSINESS NAME2" />
                    <externalMetadataColumn
                      refId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].ExternalColumns[INDUSTRY]"
                      dataType="wstr"
                      length="50"
                      name="INDUSTRY" />
                    <externalMetadataColumn
                      refId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].ExternalColumns[FEE SEQUENCE ID]"
                      dataType="wstr"
                      length="50"
                      name="FEE SEQUENCE ID" />
                    <externalMetadataColumn
                      refId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].ExternalColumns[FEE TYPE]"
                      dataType="wstr"
                      length="50"
                      name="FEE TYPE" />
                    <externalMetadataColumn
                      refId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].ExternalColumns[FEE DESCRIPTION]"
                      dataType="wstr"
                      length="100"
                      name="FEE DESCRIPTION" />
                    <externalMetadataColumn
                      refId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].ExternalColumns[RECORD DYPE]"
                      dataType="wstr"
                      length="50"
                      name="RECORD DYPE" />
                    <externalMetadataColumn
                      refId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].ExternalColumns[PAYMENT AMOUNT]"
                      dataType="wstr"
                      length="50"
                      name="PAYMENT AMOUNT" />
                    <externalMetadataColumn
                      refId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].ExternalColumns[TRANSACTION TYPE]"
                      dataType="wstr"
                      length="50"
                      name="TRANSACTION TYPE" />
                    <externalMetadataColumn
                      refId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].ExternalColumns[PAYMENT DATE]"
                      dataType="wstr"
                      length="50"
                      name="PAYMENT DATE" />
                  </externalMetadataColumns>
                </output>
                <output
                  refId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Error Output]"
                  isErrorOut="true"
                  name="Flat File Source Error Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Error Output].Columns[Flat File Source Error Output Column]"
                      codePage="65001"
                      dataType="text"
                      description="Flat File Source Error Output Column"
                      lineageId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Error Output].Columns[Flat File Source Error Output Column]"
                      name="Flat File Source Error Output Column" />
                    <outputColumn
                      refId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Extract payment data\Insert raw payment data to database"
              componentClassID="Microsoft.OLEDBDestination"
              contactInfo="OLE DB Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
              description="OLE DB Destination"
              name="Insert raw payment data to database"
              usesDispositions="true"
              version="4">
              <properties>
                <property
                  dataType="System.Int32"
                  description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                  name="CommandTimeout">0</property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the database object used to open a rowset."
                  name="OpenRowset">[DWSTAGE].[PaymentExtract]</property>
                <property
                  dataType="System.String"
                  description="Specifies the variable that contains the name of the database object used to open a rowset."
                  name="OpenRowsetVariable"></property>
                <property
                  dataType="System.String"
                  description="The SQL command to be executed."
                  name="SqlCommand"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                <property
                  dataType="System.Int32"
                  description="Specifies the column code page to use when code page information is unavailable from the data source."
                  name="DefaultCodePage">1252</property>
                <property
                  dataType="System.Boolean"
                  description="Forces the use of the DefaultCodePage property value when describing character data."
                  name="AlwaysUseDefaultCodePage">false</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the mode used to access the database."
                  name="AccessMode"
                  typeConverter="AccessMode">3</property>
                <property
                  dataType="System.Boolean"
                  description="Indicates whether the values supplied for identity columns will be copied to the destination. If false, values for identity columns will be auto-generated at the destination. Applies only if fast load is turned on."
                  name="FastLoadKeepIdentity">false</property>
                <property
                  dataType="System.Boolean"
                  description="Indicates whether the columns containing null will have null inserted in the destination. If false, columns containing null will have their default values inserted at the destination. Applies only if fast load is turned on."
                  name="FastLoadKeepNulls">false</property>
                <property
                  dataType="System.String"
                  description="Specifies options to be used with fast load.  Applies only if fast load is turned on."
                  name="FastLoadOptions">TABLOCK,CHECK_CONSTRAINTS</property>
                <property
                  dataType="System.Int32"
                  description="Specifies when commits are issued during data insertion.  A value of 0 specifies that one commit will be issued at the end of data insertion.  Applies only if fast load is turned on."
                  name="FastLoadMaxInsertCommitSize">2147483647</property>
              </properties>
              <connections>
                <connection
                  refId="Package\Extract payment data\Insert raw payment data to database.Connections[OleDbConnection]"
                  connectionManagerID="Package.ConnectionManagers[LocalHost.Miniproject 1]"
                  connectionManagerRefId="Package.ConnectionManagers[LocalHost.Miniproject 1]"
                  description="The OLE DB runtime connection used to access the database."
                  name="OleDbConnection" />
              </connections>
              <inputs>
                <input
                  refId="Package\Extract payment data\Insert raw payment data to database.Inputs[OLE DB Destination Input]"
                  errorOrTruncationOperation="Insert"
                  errorRowDisposition="FailComponent"
                  hasSideEffects="true"
                  name="OLE DB Destination Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Extract payment data\Insert raw payment data to database.Inputs[OLE DB Destination Input].Columns[RecordId]"
                      cachedDataType="wstr"
                      cachedLength="50"
                      cachedName="RecordId"
                      externalMetadataColumnId="Package\Extract payment data\Insert raw payment data to database.Inputs[OLE DB Destination Input].ExternalColumns[RecordId]"
                      lineageId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].Columns[RecordId]" />
                    <inputColumn
                      refId="Package\Extract payment data\Insert raw payment data to database.Inputs[OLE DB Destination Input].Columns[RecordType]"
                      cachedDataType="wstr"
                      cachedLength="50"
                      cachedName="RecordType"
                      externalMetadataColumnId="Package\Extract payment data\Insert raw payment data to database.Inputs[OLE DB Destination Input].ExternalColumns[RecordType]"
                      lineageId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].Columns[RecordType]" />
                    <inputColumn
                      refId="Package\Extract payment data\Insert raw payment data to database.Inputs[OLE DB Destination Input].Columns[BusinessName]"
                      cachedDataType="wstr"
                      cachedLength="300"
                      cachedName="BusinessName"
                      externalMetadataColumnId="Package\Extract payment data\Insert raw payment data to database.Inputs[OLE DB Destination Input].ExternalColumns[BusinessName]"
                      lineageId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].Columns[BusinessName]" />
                    <inputColumn
                      refId="Package\Extract payment data\Insert raw payment data to database.Inputs[OLE DB Destination Input].Columns[BusinessName2]"
                      cachedDataType="wstr"
                      cachedLength="100"
                      cachedName="BusinessName2"
                      externalMetadataColumnId="Package\Extract payment data\Insert raw payment data to database.Inputs[OLE DB Destination Input].ExternalColumns[BusinessName2]"
                      lineageId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].Columns[BusinessName2]" />
                    <inputColumn
                      refId="Package\Extract payment data\Insert raw payment data to database.Inputs[OLE DB Destination Input].Columns[Industry]"
                      cachedDataType="wstr"
                      cachedLength="50"
                      cachedName="Industry"
                      externalMetadataColumnId="Package\Extract payment data\Insert raw payment data to database.Inputs[OLE DB Destination Input].ExternalColumns[Industry]"
                      lineageId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].Columns[Industry]" />
                    <inputColumn
                      refId="Package\Extract payment data\Insert raw payment data to database.Inputs[OLE DB Destination Input].Columns[FeeType]"
                      cachedDataType="wstr"
                      cachedLength="50"
                      cachedName="FeeType"
                      externalMetadataColumnId="Package\Extract payment data\Insert raw payment data to database.Inputs[OLE DB Destination Input].ExternalColumns[FeeType]"
                      lineageId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].Columns[FeeType]" />
                    <inputColumn
                      refId="Package\Extract payment data\Insert raw payment data to database.Inputs[OLE DB Destination Input].Columns[FeeDescription]"
                      cachedDataType="wstr"
                      cachedLength="100"
                      cachedName="FeeDescription"
                      externalMetadataColumnId="Package\Extract payment data\Insert raw payment data to database.Inputs[OLE DB Destination Input].ExternalColumns[FeeDescription]"
                      lineageId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].Columns[FeeDescription]" />
                    <inputColumn
                      refId="Package\Extract payment data\Insert raw payment data to database.Inputs[OLE DB Destination Input].Columns[PaymentAmount]"
                      cachedDataType="wstr"
                      cachedLength="50"
                      cachedName="PaymentAmount"
                      externalMetadataColumnId="Package\Extract payment data\Insert raw payment data to database.Inputs[OLE DB Destination Input].ExternalColumns[PaymentAmount]"
                      lineageId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].Columns[PaymentAmount]" />
                    <inputColumn
                      refId="Package\Extract payment data\Insert raw payment data to database.Inputs[OLE DB Destination Input].Columns[TransactionType]"
                      cachedDataType="wstr"
                      cachedLength="50"
                      cachedName="TransactionType"
                      externalMetadataColumnId="Package\Extract payment data\Insert raw payment data to database.Inputs[OLE DB Destination Input].ExternalColumns[TransactionType]"
                      lineageId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].Columns[TransactionType]" />
                    <inputColumn
                      refId="Package\Extract payment data\Insert raw payment data to database.Inputs[OLE DB Destination Input].Columns[PaymentDate]"
                      cachedDataType="wstr"
                      cachedLength="50"
                      cachedName="PaymentDate"
                      externalMetadataColumnId="Package\Extract payment data\Insert raw payment data to database.Inputs[OLE DB Destination Input].ExternalColumns[PaymentDate]"
                      lineageId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].Columns[PaymentDate]" />
                    <inputColumn
                      refId="Package\Extract payment data\Insert raw payment data to database.Inputs[OLE DB Destination Input].Columns[FeeSequenceId]"
                      cachedDataType="wstr"
                      cachedLength="50"
                      cachedName="FeeSequenceId"
                      externalMetadataColumnId="Package\Extract payment data\Insert raw payment data to database.Inputs[OLE DB Destination Input].ExternalColumns[FeeSequenceId]"
                      lineageId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output].Columns[FeeSequenceId]" />
                    <inputColumn
                      refId="Package\Extract payment data\Insert raw payment data to database.Inputs[OLE DB Destination Input].Columns[SourceRowNumber]"
                      cachedDataType="i4"
                      cachedName="SourceRowNumber"
                      externalMetadataColumnId="Package\Extract payment data\Insert raw payment data to database.Inputs[OLE DB Destination Input].ExternalColumns[SourceRowNumber]"
                      lineageId="Package\Extract payment data\Generate source row number.Outputs[Output 0].Columns[SourceRowNumber]" />
                  </inputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Extract payment data\Insert raw payment data to database.Inputs[OLE DB Destination Input].ExternalColumns[RecordId]"
                      dataType="wstr"
                      length="50"
                      name="RecordId" />
                    <externalMetadataColumn
                      refId="Package\Extract payment data\Insert raw payment data to database.Inputs[OLE DB Destination Input].ExternalColumns[RecordType]"
                      dataType="wstr"
                      length="50"
                      name="RecordType" />
                    <externalMetadataColumn
                      refId="Package\Extract payment data\Insert raw payment data to database.Inputs[OLE DB Destination Input].ExternalColumns[BusinessName]"
                      dataType="wstr"
                      length="300"
                      name="BusinessName" />
                    <externalMetadataColumn
                      refId="Package\Extract payment data\Insert raw payment data to database.Inputs[OLE DB Destination Input].ExternalColumns[BusinessName2]"
                      dataType="wstr"
                      length="100"
                      name="BusinessName2" />
                    <externalMetadataColumn
                      refId="Package\Extract payment data\Insert raw payment data to database.Inputs[OLE DB Destination Input].ExternalColumns[Industry]"
                      dataType="wstr"
                      length="50"
                      name="Industry" />
                    <externalMetadataColumn
                      refId="Package\Extract payment data\Insert raw payment data to database.Inputs[OLE DB Destination Input].ExternalColumns[FeeType]"
                      dataType="wstr"
                      length="50"
                      name="FeeType" />
                    <externalMetadataColumn
                      refId="Package\Extract payment data\Insert raw payment data to database.Inputs[OLE DB Destination Input].ExternalColumns[FeeDescription]"
                      dataType="wstr"
                      length="100"
                      name="FeeDescription" />
                    <externalMetadataColumn
                      refId="Package\Extract payment data\Insert raw payment data to database.Inputs[OLE DB Destination Input].ExternalColumns[PaymentAmount]"
                      dataType="wstr"
                      length="50"
                      name="PaymentAmount" />
                    <externalMetadataColumn
                      refId="Package\Extract payment data\Insert raw payment data to database.Inputs[OLE DB Destination Input].ExternalColumns[TransactionType]"
                      dataType="wstr"
                      length="50"
                      name="TransactionType" />
                    <externalMetadataColumn
                      refId="Package\Extract payment data\Insert raw payment data to database.Inputs[OLE DB Destination Input].ExternalColumns[PaymentDate]"
                      dataType="wstr"
                      length="50"
                      name="PaymentDate" />
                    <externalMetadataColumn
                      refId="Package\Extract payment data\Insert raw payment data to database.Inputs[OLE DB Destination Input].ExternalColumns[FeeSequenceId]"
                      dataType="wstr"
                      length="50"
                      name="FeeSequenceId" />
                    <externalMetadataColumn
                      refId="Package\Extract payment data\Insert raw payment data to database.Inputs[OLE DB Destination Input].ExternalColumns[SourceRowNumber]"
                      dataType="i4"
                      name="SourceRowNumber" />
                  </externalMetadataColumns>
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Extract payment data\Insert raw payment data to database.Outputs[OLE DB Destination Error Output]"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="OLE DB Destination Error Output"
                  synchronousInputId="Package\Extract payment data\Insert raw payment data to database.Inputs[OLE DB Destination Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Extract payment data\Insert raw payment data to database.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Extract payment data\Insert raw payment data to database.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Extract payment data\Insert raw payment data to database.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Extract payment data\Insert raw payment data to database.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Extract payment data\Redirect errors"
              componentClassID="Microsoft.FlatFileDestination"
              contactInfo="Flat File Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
              description="Flat File Destination"
              localeId="2057"
              name="Redirect errors"
              version="1">
              <properties>
                <property
                  dataType="System.Boolean"
                  description="Specifies whether the data will overwrite or append to the destination file."
                  name="Overwrite">true</property>
                <property
                  dataType="System.Null"
                  description="Specifies the text to write to the destination file before any data is written."
                  expressionType="Notify"
                  name="Header" />
                <property
                  dataType="System.Boolean"
                  description="When text qualifier is enabled, specifies whether the text qualifier in the data written to the destination file will be escaped or not."
                  name="EscapeQualifier">false</property>
              </properties>
              <connections>
                <connection
                  refId="Package\Extract payment data\Redirect errors.Connections[FlatFileConnection]"
                  connectionManagerID="Package.ConnectionManagers[Payments - errors]"
                  connectionManagerRefId="Package.ConnectionManagers[Payments - errors]"
                  name="FlatFileConnection" />
              </connections>
              <inputs>
                <input
                  refId="Package\Extract payment data\Redirect errors.Inputs[Flat File Destination Input]"
                  hasSideEffects="true"
                  name="Flat File Destination Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Extract payment data\Redirect errors.Inputs[Flat File Destination Input].Columns[Flat File Source Error Output Column]"
                      cachedCodepage="65001"
                      cachedDataType="text"
                      cachedName="Flat File Source Error Output Column"
                      externalMetadataColumnId="Package\Extract payment data\Redirect errors.Inputs[Flat File Destination Input].ExternalColumns[Flat File Source Error Output Column]"
                      lineageId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Error Output].Columns[Flat File Source Error Output Column]" />
                    <inputColumn
                      refId="Package\Extract payment data\Redirect errors.Inputs[Flat File Destination Input].Columns[ErrorCode]"
                      cachedDataType="i4"
                      cachedName="ErrorCode"
                      externalMetadataColumnId="Package\Extract payment data\Redirect errors.Inputs[Flat File Destination Input].ExternalColumns[ErrorCode]"
                      lineageId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Error Output].Columns[ErrorCode]" />
                    <inputColumn
                      refId="Package\Extract payment data\Redirect errors.Inputs[Flat File Destination Input].Columns[ErrorColumn]"
                      cachedDataType="i4"
                      cachedName="ErrorColumn"
                      externalMetadataColumnId="Package\Extract payment data\Redirect errors.Inputs[Flat File Destination Input].ExternalColumns[ErrorColumn]"
                      lineageId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Error Output].Columns[ErrorColumn]" />
                  </inputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Extract payment data\Redirect errors.Inputs[Flat File Destination Input].ExternalColumns[Flat File Source Error Output Column]"
                      codePage="65001"
                      dataType="text"
                      name="Flat File Source Error Output Column" />
                    <externalMetadataColumn
                      refId="Package\Extract payment data\Redirect errors.Inputs[Flat File Destination Input].ExternalColumns[ErrorCode]"
                      dataType="i4"
                      name="ErrorCode" />
                    <externalMetadataColumn
                      refId="Package\Extract payment data\Redirect errors.Inputs[Flat File Destination Input].ExternalColumns[ErrorColumn]"
                      dataType="i4"
                      name="ErrorColumn" />
                  </externalMetadataColumns>
                </input>
              </inputs>
            </component>
          </components>
          <paths>
            <path
              refId="Package\Extract payment data.Paths[Flat File Source Error Output]"
              endId="Package\Extract payment data\Redirect errors.Inputs[Flat File Destination Input]"
              name="Flat File Source Error Output"
              startId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Error Output]" />
            <path
              refId="Package\Extract payment data.Paths[Flat File Source Output]"
              endId="Package\Extract payment data\Generate source row number.Inputs[Input 0]"
              name="Flat File Source Output"
              startId="Package\Extract payment data\Get payment data from dataset.Outputs[Flat File Source Output]" />
            <path
              refId="Package\Extract payment data.Paths[Output 0]"
              endId="Package\Extract payment data\Insert raw payment data to database.Inputs[OLE DB Destination Input]"
              name="Output 0"
              startId="Package\Extract payment data\Generate source row number.Outputs[Output 0]" />
          </paths>
        </pipeline>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Set language and time options"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{4a351410-a274-4daf-b5cc-3131a16439a5}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Set language and time options"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2019; © 2019 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{2AE594AF-1E0E-4046-88A5-B26D8D809332}"
          SQLTask:SqlStatementSource="SET DATEFIRST 1,&#xA;    DATEFORMAT mdy,&#xA;    LANGUAGE US_ENGLISH;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Truncate staging tables, dimensions and fact tables"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{8a37f0e7-4efa-4d68-8073-106c1679b216}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Truncate staging tables, dimensions and fact tables"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2019; © 2019 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{2AE594AF-1E0E-4046-88A5-B26D8D809332}"
          SQLTask:SqlStatementSource="TRUNCATE TABLE [DWSTAGE].[LicenseExtract];&#xA;&#xA;TRUNCATE TABLE [DWSTAGE].[FeeExtract];&#xA;&#xA;TRUNCATE TABLE [DWSTAGE].[PaymentExtract];&#xA;&#xA;TRUNCATE TABLE [DWSTAGE].[LicenseStage];&#xA;&#xA;TRUNCATE TABLE [DWSTAGE].[FeeStage];&#xA;&#xA;TRUNCATE TABLE [DWSTAGE].[PaymentStage];&#xA;&#xA;TRUNCATE TABLE [DW].[LicenseFact];&#xA;&#xA;TRUNCATE TABLE [DW].[PaymentFact];&#xA;&#xA;DELETE FROM [DW].[FeeDim];&#xA;DBCC CHECKIDENT ([DW.FeeDim], RESEED, 0);&#xA;&#xA;DELETE FROM [DW].[BusinessDim];&#xA;DBCC CHECKIDENT ([DW.BusinessDim], RESEED, 0);&#xA;&#xA;DELETE FROM [DW].[IndustryDim];&#xA;DBCC CHECKIDENT ([DW.IndustryDim], RESEED, 0);&#xA;&#xA;DELETE FROM [DW].[TimeDim];&#xA;&#xA;DELETE FROM [DW].[TransactionTypeDim];&#xA;DBCC CHECKIDENT ([DW.TransactionTypeDim], RESEED, 0);&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{04E13A21-92F1-47C8-A5E6-1BE3DC3E097A}"
      DTS:From="Package\Set language and time options"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\Ensure DWSTAGE and DW schemas exist" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 1]"
      DTS:CreationName=""
      DTS:DTSID="{85A9ECD9-8E43-4C80-9F5F-F085EF21ECAD}"
      DTS:From="Package\Ensure needed functions exist"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 1"
      DTS:To="Package\Ensure DWSTAGE and DW schemas exist" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 2]"
      DTS:CreationName=""
      DTS:DTSID="{2040C2CB-20E0-4D02-B542-B29E77B22183}"
      DTS:From="Package\Truncate staging tables, dimensions and fact tables"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 2"
      DTS:To="Package\Extract license data" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 3]"
      DTS:CreationName=""
      DTS:DTSID="{3EAB0242-C804-45B7-A26B-D27C3944E884}"
      DTS:From="Package\Ensure DWSTAGE and DW schemas exist"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 3"
      DTS:To="Package\Ensure staging tables, dimensions and fact tables exist" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 4]"
      DTS:CreationName=""
      DTS:DTSID="{B950CACB-C4E8-4A72-98FF-41E6F4BDB80F}"
      DTS:From="Package\Ensure staging tables, dimensions and fact tables exist"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 4"
      DTS:To="Package\Truncate staging tables, dimensions and fact tables" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 5]"
      DTS:CreationName=""
      DTS:DTSID="{0E3430C5-43C4-40D3-8B9F-00B3DF8C5D1D}"
      DTS:From="Package\Truncate staging tables, dimensions and fact tables"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 5"
      DTS:To="Package\Extract fee data" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 6]"
      DTS:CreationName=""
      DTS:DTSID="{BF4218F1-40E0-4892-B122-2722F289C2E3}"
      DTS:From="Package\Truncate staging tables, dimensions and fact tables"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 6"
      DTS:To="Package\Extract payment data" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="16" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="240,42"
          Id="Package\Ensure correctness of license data"
          TopLeft="217,622" />
        <NodeLayout
          Size="273,42"
          Id="Package\Ensure DWSTAGE and DW schemas exist"
          TopLeft="504,191" />
        <NodeLayout
          Size="220,42"
          Id="Package\Ensure needed functions exist"
          TopLeft="704,75" />
        <NodeLayout
          Size="337,42"
          Id="Package\Ensure staging tables, dimensions and fact tables exist"
          TopLeft="474,304" />
        <NodeLayout
          Size="154,42"
          Id="Package\Extract fee data"
          TopLeft="562,529" />
        <NodeLayout
          Size="171,42"
          Id="Package\Extract license data"
          TopLeft="252,525" />
        <NodeLayout
          Size="180,42"
          Id="Package\Extract payment data"
          TopLeft="837,532" />
        <NodeLayout
          Size="223,42"
          Id="Package\Set language and time options"
          TopLeft="358,76" />
        <NodeLayout
          Size="321,42"
          Id="Package\Truncate staging tables, dimensions and fact tables"
          TopLeft="481,408" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="469.5,118">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="126.833333333333,73"
              Start="0,0"
              End="126.833333333333,65.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,39.544792425346" />
                  <mssgle:CubicBezierSegment
                    Point1="0,39.544792425346"
                    Point2="0,43.544792425346"
                    Point3="4,43.544792425346" />
                  <mssgle:LineSegment
                    End="122.833333333333,43.544792425346" />
                  <mssgle:CubicBezierSegment
                    Point1="122.833333333333,43.544792425346"
                    Point2="126.833333333333,43.544792425346"
                    Point3="126.833333333333,47.544792425346" />
                  <mssgle:LineSegment
                    End="126.833333333333,65.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 1]"
          TopLeft="814,117">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-129.333333333333,74"
              Start="0,0"
              End="-129.333333333333,66.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,40.1412964311726" />
                  <mssgle:CubicBezierSegment
                    Point1="0,40.1412964311726"
                    Point2="0,44.1412964311726"
                    Point3="-4,44.1412964311726" />
                  <mssgle:LineSegment
                    End="-125.333333333333,44.1412964311726" />
                  <mssgle:CubicBezierSegment
                    Point1="-125.333333333333,44.1412964311726"
                    Point2="-129.333333333333,44.1412964311726"
                    Point3="-129.333333333333,48.1412964311726" />
                  <mssgle:LineSegment
                    End="-129.333333333333,66.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 2]"
          TopLeft="563.25,450">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-225.75,75"
              Start="0,0"
              End="-225.75,67.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,21.4119464469619" />
                  <mssgle:CubicBezierSegment
                    Point1="0,21.4119464469619"
                    Point2="0,25.4119464469619"
                    Point3="-4,25.4119464469619" />
                  <mssgle:LineSegment
                    End="-221.75,25.4119464469619" />
                  <mssgle:CubicBezierSegment
                    Point1="-221.75,25.4119464469619"
                    Point2="-225.75,25.4119464469619"
                    Point3="-225.75,29.4119464469619" />
                  <mssgle:LineSegment
                    End="-225.75,67.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 3]"
          TopLeft="641.5,233">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,71"
              Start="0,0"
              End="0,63.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,63.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 4]"
          TopLeft="642,346">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,62"
              Start="0,0"
              End="0,54.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,54.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 5]"
          TopLeft="640.25,450">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,79"
              Start="0,0"
              End="0,71.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,71.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 6]"
          TopLeft="719.75,450">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="207.25,82"
              Start="0,0"
              End="207.25,74.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,23.783728115345" />
                  <mssgle:CubicBezierSegment
                    Point1="0,23.783728115345"
                    Point2="0,27.783728115345"
                    Point3="4,27.783728115345" />
                  <mssgle:LineSegment
                    End="203.25,27.783728115345" />
                  <mssgle:CubicBezierSegment
                    Point1="203.25,27.783728115345"
                    Point2="207.25,27.783728115345"
                    Point3="207.25,31.783728115345" />
                  <mssgle:LineSegment
                    End="207.25,74.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <TaskHost
    design-time-name="Package\Ensure correctness of license data">
    <LayoutInfo>
      <GraphLayout
        Capacity="16" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="302,42"
          Id="Package\Ensure correctness of license data\Filter out rows with empty LicenseCreationDate"
          TopLeft="108,274" />
        <NodeLayout
          Size="153,42"
          Id="Package\Ensure correctness of license data\Do something 2"
          TopLeft="571,273" />
        <NodeLayout
          Size="311,42"
          Id="Package\Ensure correctness of license data\Get selected columns from extracted license data"
          TopLeft="107,48" />
        <NodeLayout
          Size="153,42"
          Id="Package\Ensure correctness of license data\Do something 1"
          TopLeft="572,162" />
        <NodeLayout
          Size="274,42"
          Id="Package\Ensure correctness of license data\Filter out rows with empty BusinessName"
          TopLeft="123,161" />
        <NodeLayout
          Size="156,42"
          Id="Package\Ensure correctness of license data\Data Conversion"
          TopLeft="181,382" />
        <EdgeLayout
          Id="Package\Ensure correctness of license data.Paths[OLE DB Source Output]"
          TopLeft="261.25,90">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,71"
              Start="0,0"
              End="0,63.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,63.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Ensure correctness of license data.Paths[LicenseCreationDate is empty]"
          TopLeft="410,294.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="161,0"
              Start="0,0"
              End="153.5,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="153.5,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="10.95806640625,5,131.5838671875,11.4140625"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Ensure correctness of license data.Paths[LicenseCreationDate exists]"
          TopLeft="259,316">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,66"
              Start="0,0"
              End="0,58.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,58.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-59.397578125,24.47314453125,118.79515625,9.5537109375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Ensure correctness of license data.Paths[BusinessName is empty]"
          TopLeft="397,182.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="175,0"
              Start="0,0"
              End="167.5,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="167.5,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="31.09306640625,5,105.3138671875,11.3310546875"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Ensure correctness of license data.Paths[BusinessName exists]"
          TopLeft="259.5,203">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,71"
              Start="0,0"
              End="0,63.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,63.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-46.262578125,27.0146484375,92.52515625,9.470703125"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <PipelineComponentMetadata
    design-time-name="Package\Ensure correctness of license data\Get selected columns from extracted license data">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <TaskHost
    design-time-name="Package\Extract fee data">
    <LayoutInfo>
      <GraphLayout
        Capacity="8" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="228,42"
          Id="Package\Extract fee data\Insert raw fee data to database"
          TopLeft="374,419" />
        <NodeLayout
          Size="149,42"
          Id="Package\Extract fee data\Redirect errors"
          TopLeft="680,272" />
        <NodeLayout
          Size="217,42"
          Id="Package\Extract fee data\Extract fee data from dataset"
          TopLeft="514,114" />
        <EdgeLayout
          Id="Package\Extract fee data.Paths[Flat File Source Error Output]"
          TopLeft="657.333333333333,156">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="97.1666666666667,116"
              Start="0,0"
              End="97.1666666666667,108.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,42.9094236047576" />
                  <mssgle:CubicBezierSegment
                    Point1="0,42.9094236047576"
                    Point2="0,46.9094236047576"
                    Point3="4,46.9094236047576" />
                  <mssgle:LineSegment
                    End="93.1666666666667,46.9094236047576" />
                  <mssgle:CubicBezierSegment
                    Point1="93.1666666666667,46.9094236047576"
                    Point2="97.1666666666667,46.9094236047576"
                    Point3="97.1666666666667,50.9094236047576" />
                  <mssgle:LineSegment
                    End="97.1666666666667,108.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-15.0430533854166,51.9094236047576,127.2527734375,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="217,42"
          Id="Package\Extract fee data\Generate source row number"
          TopLeft="381,274" />
        <EdgeLayout
          Id="Package\Extract fee data.Paths[Flat File Source Output]"
          TopLeft="587.666666666667,156">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-98.1666666666666,118"
              Start="0,0"
              End="-98.1666666666666,110.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,43.7182067703568" />
                  <mssgle:CubicBezierSegment
                    Point1="0,43.7182067703568"
                    Point2="0,47.7182067703568"
                    Point3="-4,47.7182067703568" />
                  <mssgle:LineSegment
                    End="-94.1666666666666,47.7182067703568" />
                  <mssgle:CubicBezierSegment
                    Point1="-94.1666666666666,47.7182067703568"
                    Point2="-98.1666666666666,47.7182067703568"
                    Point3="-98.1666666666666,51.7182067703568" />
                  <mssgle:LineSegment
                    End="-98.1666666666666,110.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Extract fee data.Paths[Output 0]"
          TopLeft="488.75,316">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,103"
              Start="0,0"
              End="0,95.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,95.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <PipelineComponentMetadata
    design-time-name="Package\Extract fee data\Insert raw fee data to database">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <TaskHost
    design-time-name="Package\Extract license data">
    <LayoutInfo>
      <GraphLayout
        Capacity="8" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="218,42"
          Id="Package\Extract license data\Get license data from dataset"
          TopLeft="514,114" />
        <NodeLayout
          Size="149,42"
          Id="Package\Extract license data\Redirect errors"
          TopLeft="679,258" />
        <NodeLayout
          Size="276,42"
          Id="Package\Extract license data\Insert license data to LicenseExtract table"
          TopLeft="349,376" />
        <EdgeLayout
          Id="Package\Extract license data.Paths[Flat File Source Error Output]"
          TopLeft="658,156">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="95.5,102"
              Start="0,0"
              End="95.5,94.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,37.2459016393443" />
                  <mssgle:CubicBezierSegment
                    Point1="0,37.2459016393443"
                    Point2="0,41.2459016393443"
                    Point3="4,41.2459016393443" />
                  <mssgle:LineSegment
                    End="91.5,41.2459016393443" />
                  <mssgle:CubicBezierSegment
                    Point1="91.5,41.2459016393443"
                    Point2="95.5,41.2459016393443"
                    Point3="95.5,45.2459016393443" />
                  <mssgle:LineSegment
                    End="95.5,94.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-15.87638671875,46.2459016393443,127.2527734375,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="217,42"
          Id="Package\Extract license data\Generate source row number"
          TopLeft="380,257" />
        <EdgeLayout
          Id="Package\Extract license data.Paths[Flat File Source Output]"
          TopLeft="588,156">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-99.5,101"
              Start="0,0"
              End="-99.5,93.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,36.8415300546448" />
                  <mssgle:CubicBezierSegment
                    Point1="0,36.8415300546448"
                    Point2="0,40.8415300546448"
                    Point3="-4,40.8415300546448" />
                  <mssgle:LineSegment
                    End="-95.5,40.8415300546448" />
                  <mssgle:CubicBezierSegment
                    Point1="-95.5,40.8415300546448"
                    Point2="-99.5,40.8415300546448"
                    Point3="-99.5,44.8415300546448" />
                  <mssgle:LineSegment
                    End="-99.5,93.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Extract license data.Paths[Output 0]"
          TopLeft="487.75,299">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,77"
              Start="0,0"
              End="0,69.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,69.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <PipelineComponentMetadata
    design-time-name="Package\Extract license data\Insert license data to LicenseExtract table">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <TaskHost
    design-time-name="Package\Extract payment data">
    <LayoutInfo>
      <GraphLayout
        Capacity="8" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="254,42"
          Id="Package\Extract payment data\Insert raw payment data to database"
          TopLeft="376,394" />
        <NodeLayout
          Size="149,42"
          Id="Package\Extract payment data\Redirect errors"
          TopLeft="680,272" />
        <NodeLayout
          Size="227,42"
          Id="Package\Extract payment data\Get payment data from dataset"
          TopLeft="514,114" />
        <EdgeLayout
          Id="Package\Extract payment data.Paths[Flat File Source Error Output]"
          TopLeft="664,156">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="90.5,116"
              Start="0,0"
              End="90.5,108.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,42.8871391076116" />
                  <mssgle:CubicBezierSegment
                    Point1="0,42.8871391076116"
                    Point2="0,46.8871391076116"
                    Point3="4,46.8871391076116" />
                  <mssgle:LineSegment
                    End="86.5,46.8871391076116" />
                  <mssgle:CubicBezierSegment
                    Point1="86.5,46.8871391076116"
                    Point2="90.5,46.8871391076116"
                    Point3="90.5,50.8871391076116" />
                  <mssgle:LineSegment
                    End="90.5,108.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-18.37638671875,51.8871391076116,127.2527734375,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="217,42"
          Id="Package\Extract payment data\Generate source row number"
          TopLeft="396,273" />
        <EdgeLayout
          Id="Package\Extract payment data.Paths[Flat File Source Output]"
          TopLeft="591,156">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-86.5,117"
              Start="0,0"
              End="-86.5,109.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,43.2913385826772" />
                  <mssgle:CubicBezierSegment
                    Point1="0,43.2913385826772"
                    Point2="0,47.2913385826772"
                    Point3="-4,47.2913385826772" />
                  <mssgle:LineSegment
                    End="-82.5,47.2913385826772" />
                  <mssgle:CubicBezierSegment
                    Point1="-82.5,47.2913385826772"
                    Point2="-86.5,47.2913385826772"
                    Point3="-86.5,51.2913385826772" />
                  <mssgle:LineSegment
                    End="-86.5,109.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Extract payment data.Paths[Output 0]"
          TopLeft="503.75,315">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,79"
              Start="0,0"
              End="0,71.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,71.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <PipelineComponentMetadata
    design-time-name="Package\Extract payment data\Insert raw payment data to database">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>